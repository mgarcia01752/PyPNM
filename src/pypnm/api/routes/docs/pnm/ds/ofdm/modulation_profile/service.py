
from __future__ import annotations

# SPDX-License-Identifier: MIT
# Copyright (c) 2025 Maurice Garcia

import logging
from typing import Tuple

from pypnm.api.routes.common.extended.common_measure_service import CommonMeasureService
from pypnm.config.pnm_config_manager import PnmConfigManager
from pypnm.lib.inet import Inet

from pypnm.docsis.cable_modem import CableModem
from pypnm.pnm.data_type.pnm_test_types import DocsPnmCmCtlTest

class CmDsOfdmModProfileService(CommonMeasureService):
    """
    Service class for handling DOCSIS 3.1 Downstream OFDM Modulation Profile retrieval and analysis.

    This service coordinates the execution of the DS-OFDM modulation profile test via SNMP and TFTP, 
    downloading and parsing modulation profile files generated by the cable modem.

    It extends the CommonMeasureService base class, which provides infrastructure for running PNM tests 
    that involve SNMP control and TFTP-based result file handling.

    Args:
        cable_modem (CableModem): Instance representing the target cable modem with SNMP access.
        tftp_servers (Tuple[Inet, Inet], optional): Tuple containing the IPv4 and IPv6 TFTP server addresses 
                                                    used for result file retrieval. Defaults to values from config.
        tftp_path (str, optional): Directory path on the TFTP server where result files will be written. 
                                   Defaults to the configured TFTP path.

    Attributes:
        logger (logging.Logger): Logger instance used for service-specific debug and error messages.
    """
    def __init__(self, 
                 cable_modem: CableModem,
                 tftp_servers: Tuple[Inet, Inet] = PnmConfigManager.get_tftp_servers(),
                 tftp_path: str = PnmConfigManager.get_tftp_path()):
        super().__init__(
            DocsPnmCmCtlTest.DS_OFDM_MODULATION_PROFILE, 
            cable_modem,
            tftp_servers,
            tftp_path,
            cable_modem.getWriteCommunity()
        )
        self.logger = logging.getLogger(self.__class__.__name__)
