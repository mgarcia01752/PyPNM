{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyPNM Wiki","text":"<p>Welcome to the PyPNM documentation. Use this master index to navigate through all guides, API references, examples, tools, and system documentation.</p>"},{"location":"#api-reference","title":"\ud83d\udcda API Reference","text":""},{"location":"#fastapi-reference","title":"FastAPI Reference","text":"<ul> <li>FastAPI Overview</li> </ul>"},{"location":"#multi-snapshot-analysis","title":"\u2022 Multi-Snapshot Analysis","text":"<ul> <li>Overview</li> <li>Capture Operation</li> <li>Multi-Capture Channel Estimation</li> <li>Multi-Capture RxMER</li> </ul>"},{"location":"#single-snapshot-endpoints","title":"\u2022 Single-Snapshot Endpoints","text":"<ul> <li>Single Snapshot Overview</li> </ul>"},{"location":"#status-codes","title":"\u2022 Status Codes","text":"<ul> <li>FastAPI Status Codes</li> </ul>"},{"location":"#pnm-data-parsers","title":"PNM Data Parsers","text":"<ul> <li>Spectrum Analyzer</li> <li>Channel Estimation Coefficients</li> <li>Constellation Display</li> <li>FEC Summary</li> <li>Histogram</li> <li>RxMER</li> <li>US OFDMA Pre-EQ</li> </ul>"},{"location":"#python-helpers","title":"Python Helpers","text":"<ul> <li> <p>Python API Index</p> </li> <li> <p>SNMPv2c</p> </li> <li>System Config</li> </ul>"},{"location":"#docsis-background","title":"\ud83d\udcbe DOCSIS Background","text":"<ul> <li>DOCSIS Overview</li> </ul>"},{"location":"#examples","title":"\ud83d\udee0 Examples","text":"<ul> <li>Example Scripts</li> </ul>"},{"location":"#system-setup","title":"\u2699\ufe0f System &amp; Setup","text":"<ul> <li>Generate SSL Certificates</li> <li>System Configuration</li> <li>PNM File Transfer Methods</li> <li>PyPNM DataBase</li> </ul>"},{"location":"#tools","title":"\ud83e\uddf0 Tools","text":"<ul> <li>MIB Compiler</li> <li>Clean</li> </ul>"},{"location":"api/fast-api/common/","title":"Common FastAPI Requests/Responses","text":"<p>This section covers some common request and response patterns in FastAPI.</p>"},{"location":"api/fast-api/multi/","title":"Index","text":""},{"location":"api/fast-api/multi/#multi-capture-api-index","title":"\ud83d\udcf1 Multi-Capture API Index","text":"<p>Explore the PyPNM multi-capture workflows for DOCSIS cable modems. This index provides direct access to key API guides and advanced analysis tools for repeated measurements and diagnostics.</p> <p>\ud83d\udd27 Background See the Capture Operation Guide for an overview of the capture infrastructure and lifecycle.</p>"},{"location":"api/fast-api/multi/#multi-capture-workflows","title":"\ud83d\ude80 Multi-Capture Workflows","text":"Workflow Description \ud83e\uddfd Multi-RxMER Capture Periodic downstream OFDM RxMER sampling and analysis across multiple carriers. \ud83d\udd2c Multi-DS Channel Estimation Periodic downstream OFDM channel estimation coefficient captures and reporting."},{"location":"api/fast-api/multi/#advanced-analysis-modules","title":"\ud83d\udcca Advanced Analysis Modules","text":"Module Description \ud83d\udcc8 Group Delay Calculator Computes group delay variations from channel estimates. \ud83d\udd25 Heatmap Anomalies Identifies temporal and spatial RxMER deviations using heatmap inspection. \ud83c\udfaf OFDM Performance 1:1 Evaluates per-subcarrier capacity vs profile on a 1:1 basis. \ud83d\udd0d OFDM Echo Detection Detects echo distortions and impulse reflections in OFDM channels. \u26a1 Phase Slope LTE Detection Detects LTE-related slope patterns in phase data that indicate external interference. \ud83d\udd00 Phase Slope (Legacy) Legacy method for identifying slope-related anomalies in upstream phase data. \ud83e\uddfd Phase Slope (General) General-purpose slope analysis for both upstream and downstream channels. \ud83e\uddee Signal Statistics Extracts RMS, min/max, and statistical variance from signal snapshots."},{"location":"api/fast-api/multi/#each-guide-includes","title":"\ud83d\udcd8 Each Guide Includes:","text":"<ol> <li>Workflow Overview \u2013 High-level description of the process</li> <li>Endpoint Stubs \u2013 Example JSON requests and responses</li> <li>Usage Examples \u2013 Common payloads and scenarios</li> <li>Implementation Notes \u2013 Practical tips and caveats</li> </ol> <p>\ud83d\udd17 Get Started: Choose the appropriate guide for your use case and begin integrating multi-capture functionality with the PyPNM API.</p>"},{"location":"api/fast-api/multi/capture-operation/","title":"Multi\u2011Capture Operation Overview","text":"<p>When you initiate a multi-capture session (e.g., Multi\u2011RxMER or Multi\u2011DS\u2011Channel\u2011Estimation), PyPNM maintains a lightweight file\u2011based tracking system and stages resulting PNM binaries for downstream workflows.</p> <p>Directory Layout:</p> <pre><code>data/\n\u251c\u2500\u2500 db/\n\u2502   \u251c\u2500\u2500 operation_capture.json      # Maps operations to capture groups\n\u2502   \u251c\u2500\u2500 capture_group.json          # Records capture groups\n\u2502   \u2514\u2500\u2500 transactions.json           # Lists each staged file transaction\n\u2514\u2500\u2500 pnm/\n    \u2514\u2500\u2500 &lt;.bin files&gt;                # Raw PNM captures retrieved via TFTP\n</code></pre>"},{"location":"api/fast-api/multi/capture-operation/#1-operation-database-operation_capturejson","title":"1. Operation Database (<code>operation_capture.json</code>)","text":"<p>Records each background operation and its connection to a capture group.</p> <p>Example:</p> <pre><code>{\n  \"f6afb2d7df2c4a5c\": {\n    \"capture_group\": \"10b6ea239641487c\",\n    \"created\": 1748280293\n  }\n}\n</code></pre> <ul> <li>Key: <code>operation_id</code> (e.g., <code>f6afb2d7df2c4a5c</code>).</li> <li>capture_group: Associated <code>capture_group_id</code>.</li> <li>created: Unix timestamp when the operation started.</li> </ul>"},{"location":"api/fast-api/multi/capture-operation/#2-capture-group-database-capture_groupjson","title":"2. Capture Group Database (<code>capture_group.json</code>)","text":"<p>Tracks each high\u2011level invocation as a distinct capture group.</p> <p>Example:</p> <pre><code>{\n  \"10b6ea239641487c\": {\n    \"created\": 1748280293,\n    \"transactions\": [\n      \"2ee6138bbc1b3c3d\",\n      \"65c04a28d0add931\",\n      \"df4d2b3e3146ef30\",\n      \"6773c9ebc097a579\"\n    ]\n  }\n}\n</code></pre> <ul> <li>Key: <code>capture_group_id</code> (e.g., <code>10b6ea239641487c</code>).</li> <li>created: Unix timestamp when the group was created.</li> <li>transactions: List of associated <code>transaction_id</code>s (one per file).</li> </ul>"},{"location":"api/fast-api/multi/capture-operation/#3-transactions-manifest-transactionsjson","title":"3. Transactions Manifest (<code>transactions.json</code>)","text":"<p>A detailed manifest of every PNM file moved into <code>data/pnm/</code> during the capture.</p> <p>Example:</p> <pre><code>{\n  \"2ee6138bbc1b3c3d\": {\n      \"timestamp\": 1748280294,\n      \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n      \"pnm_test_type\": \"DS_OFDM_RXMER_PER_SUBCAR\",\n      \"filename\": \"ds_ofdm_rxmer_per_subcar_aa:bb:cc:dd:ee:ff_34_1748280294.bin\",\n      \"device_details\": {\n          \"sys_descr\": {\n              \"HW_REV\": \"1.0\",\n              \"VENDOR\": \"LANCity\",\n              \"BOOTR\": \"NONE\",\n              \"SW_REV\": \"1.0.0\",\n              \"MODEL\": \"LCPET-3\"\n          }\n      }\n  }\n}\n</code></pre> <ul> <li>Key: <code>transaction_id</code> (e.g., <code>2ee6138bbc1b3c3d</code>).</li> <li>timestamp: Unix epoch when the file was staged.</li> <li>mac_address: Sanitized MAC of the target modem.</li> <li>pnm_test_type: Identifier of the PNM capture type.</li> <li>filename: Name of the <code>.bin</code> file in <code>data/pnm/</code>.</li> <li>device_details.sys_descr: Snapshot of modem metadata at capture time.</li> </ul>"},{"location":"api/fast-api/multi/capture-operation/#workflow-summary","title":"Workflow Summary","text":"<ol> <li>Start Multi\u2011Capture: System generates a new <code>operation_id</code> linked to a new <code>capture_group_id</code>.</li> <li>Periodic Triggers: SNMP instructs the modem to TFTP-upload the PNM blob.</li> <li>File Staging: PyPNM copies each <code>.bin</code> into <code>data/pnm/</code> and appends a JSON entry.</li> <li>Database Updates: Timestamps and transaction lists are updated in both <code>operation_capture.json</code> and <code>capture_group.json</code>.</li> <li>Completion: After the capture ends, the three JSON tables fully describe what was captured, when, and for which operation/group.</li> </ol> <p>Downstream tools can monitor <code>transactions.json</code> as a manifest to automatically discover and process new PNM files\u2014no manual polling required.</p> <ol> <li>Start Multi\u2011Capture: System generates a new <code>operation_id</code> linked to a new <code>capture_group_id</code>.</li> <li>Periodic Triggers: SNMP instructs the modem to TFTP-upload the PNM blob.</li> <li>File Staging: PyPNM copies each <code>.bin</code> into <code>data/pnm/</code> and appends a JSON entry.</li> <li>Database Updates: Timestamps and transaction lists are updated in both <code>operation_capture.json</code> and <code>capture_group.json</code>.</li> <li>Completion: After the capture ends, the three JSON tables fully describe what was captured, when, and for which operation/group.</li> </ol> <p>Downstream tools can monitor <code>transactions.json</code> as a manifest to automatically discover and process new PNM files\u2014no manual polling required.</p>"},{"location":"api/fast-api/multi/multi-capture-chan-est/","title":"Multi-DS Channel Estimation API Guide","text":"<p>The Multi-DS Channel Estimation API provides mechanisms to schedule periodic captures of downstream OFDM channel estimation coefficients, monitor capture progress, retrieve raw PNM sample files, stop an in-progress capture, and perform post-capture analysis.</p>"},{"location":"api/fast-api/multi/multi-capture-chan-est/#endpoint-summary","title":"Endpoint Summary","text":"Endpoint HTTP Method Section Reference Description <code>/advance/multiChannelEstimation/start</code> <code>POST</code> Start Capture Begin a multi-sample ChannelEstimation capture <code>/advance/multiChannelEstimation/status/{operation_id}</code> <code>GET</code> Check Status Retrieve capture progress and status <code>/advance/multiChannelEstimation/results/{operation_id}</code> <code>GET</code> Download Results Download a ZIP of captured PNM files <code>/advance/multiChannelEstimation/stop/{operation_id}</code> <code>DELETE</code> Stop Capture Early Stop an active capture gracefully <code>/advance/multiChannelEstimation/analysis</code> <code>POST</code> Analysis Run signal analysis on collected data"},{"location":"api/fast-api/multi/multi-capture-chan-est/#workflow-overview","title":"Workflow Overview","text":"<ol> <li> <p>Start a Capture (<code>POST /advance/multiChannelEstimation/start</code>)    Submit capture parameters (duration, interval) and SNMP settings.    Returns a <code>group_id</code> and <code>operation_id</code> for tracking.</p> </li> <li> <p>Check Status (<code>GET /advance/multiChannelEstimation/status/{operation_id}</code>)    Poll the capture state, number of samples collected, and time remaining.</p> </li> <li> <p>Download Results (<code>GET /advance/multiChannelEstimation/results/{operation_id}</code>)    Stream a ZIP archive containing all captured PNM files for the operation.</p> </li> <li> <p>Stop Early (<code>DELETE /advance/multiChannelEstimation/stop/{operation_id}</code>)    Signal the background process to stop after the current iteration and return the final status.</p> </li> <li> <p>Analysis (<code>POST /advance/multiChannelEstimation/analysis</code>)    Provide an <code>operation_id</code> and <code>analysis_type</code> to run signal-analysis routines on collected samples.</p> </li> </ol>"},{"location":"api/fast-api/multi/multi-capture-chan-est/#1-start-capture","title":"1. Start Capture","text":"<p>Request (<code>MultiChanEstimationRequest</code>):</p> <pre><code>{\n  \"cable_modem\": {\n    \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n    \"ip_address\": \"192.168.0.100\",\n    \"snmp\": {\n      \"snmpV2C\": { \"community\": \"public\" },\n      \"snmpV3\": {\n        \"username\": \"user\",\n        \"securityLevel\": \"noAuthNoPriv\",\n        \"authProtocol\": \"MD5\",\n        \"authPassword\": \"password\",\n        \"privProtocol\": \"DES\",\n        \"privPassword\": \"password\"\n      }\n    }\n  },\n  \"capture\": {\n    \"parameters\": {\n      \"measurement_duration\": 120,\n      \"sample_interval\": 15\n    }\n  }\n}\n````\n**Response** (`MultiChanEstimationStartResponse`):\n\n```json\n{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": \"started\",\n  \"message\": null,\n  \"operation\": {\n    \"group_id\": \"grp-abc123\",\n    \"operation_id\": \"3df9f479d7a549b7\"\n  }\n}\n</code></pre>"},{"location":"api/fast-api/multi/multi-capture-chan-est/#2-check-status","title":"2. Check Status","text":"<p>Request</p> <p><code>GET /advance/multiChannelEstimation/status/3df9f479d7a549b7</code></p> <p>Response (<code>MultiChanEstimationStatusResponse</code>):</p> <pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": \"success\",\n  \"message\": null,\n  \"operation\": {\n    \"operation_id\": \"3df9f479d7a549b7\",\n    \"state\": \"RUNNING\",\n    \"collected\": 3,\n    \"time_remaining\": 105,\n    \"message\": null\n  }\n}\n</code></pre>"},{"location":"api/fast-api/multi/multi-capture-chan-est/#3-download-results","title":"3. Download Results","text":"<p>Request</p> <p><code>GET /advance/multiChannelEstimation/results/3df9f479d7a549b7</code></p> <p>Response</p> <p>ZIP archive (<code>application/zip</code>) containing captured ChannelEstimation files.</p> <p>Example archive contents:</p> <pre><code>\n</code></pre>"},{"location":"api/fast-api/multi/multi-capture-chan-est/#4-stop-capture-early","title":"4. Stop Capture Early","text":"<p>Request</p> <p><code>DELETE /advance/multiChannelEstimation/stop/3df9f479d7a549b7</code></p> <p>Response (<code>MultiChanEstimationStatusResponse</code>):</p> <pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": \"STOPPED\",\n  \"message\": null,\n  \"operation\": {\n    \"operation_id\": \"3df9f479d7a549b7\",\n    \"state\": \"STOPPED\",\n    \"collected\": 5,\n    \"time_remaining\": 0,\n    \"message\": null\n  }\n}\n</code></pre>"},{"location":"api/fast-api/multi/multi-capture-chan-est/#5-analysis","title":"5. Analysis","text":"<p>Available Analysis Types</p> Analysis Type Value Description <code>MIN_AVG_MAX</code> <code>0</code> Computes minimum, average, and maximum amplitude or phase values across all captures. <code>GROUP_DELAY</code> <code>1</code> Calculates per-subcarrier group delay from the channel frequency response. <code>LTE_DETECTION_PHASE_SLOPE</code> <code>2</code> Detects potential LTE interference using phase-slope anomalies across the OFDM spectrum. <code>ECHO_DETECTION_PHASE_SLOPE</code> <code>3</code> Identifies in-channel echoes or reflections by evaluating abnormal phase slope discontinuities. <code>ECHO_DETECTION_IFFT</code> <code>4</code> Performs echo detection via inverse FFT to reveal impulse-response peaks. <p>Request (<code>MultiChanEstimationAnalysisRequest</code>):</p> <pre><code>{\n  \"analysis\": {\n    \"type\": 0\n  },\n  \"output\": {\n    \"type\": 4\n  },\n  \"operation_id\": \"hash-like-string\"\n}\n</code></pre> <p>Response (<code>MultiChanEstimationAnalysisResponse</code>):</p> <pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": 0,\n  \"message\": \"Analysis GROUP_DELAY completed for group grp-abc123\",\n  \"data\": {\n    \"194\": {\n      \"frequency\": [90000000, 90001562, 90003125],\n      \"group_delay_us\": [0.08, 0.07, 0.09]\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/multi/multi-capture-rxmer/","title":"Multi\u2011RxMER Capture &amp; Analysis API","text":"<p>A concise, implementation\u2011ready reference for orchestrating downstream OFDM RxMER captures, status polling, result retrieval, early termination, and post\u2011capture analysis.</p>"},{"location":"api/fast-api/multi/multi-capture-rxmer/#contents","title":"\ud83d\udcda Contents","text":"<ul> <li>At a Glance</li> <li>Workflow</li> <li> <p>Endpoints</p> </li> <li> <p>1) Start Capture</p> </li> <li>2) Status Check</li> <li>3) Download Results</li> <li>4) Stop Capture Early</li> <li>5) Analysis</li> <li>Timing &amp; Polling</li> <li>Compatibility Matrix</li> <li>Conventions</li> </ul>"},{"location":"api/fast-api/multi/multi-capture-rxmer/#at-a-glance","title":"At a Glance","text":"Step HTTP Path Purpose 1 POST <code>/advance/multiRxMer/start</code> Begin a background capture 2 GET <code>/advance/multiRxMer/status/{operation_id}</code> Poll capture progress 3 GET <code>/advance/multiRxMer/results/{operation_id}</code> Download a ZIP of captured PNM files 4 DELETE <code>/advance/multiRxMer/stop/{operation_id}</code> Stop the capture after current iteration 5 POST <code>/advance/multiRxMer/analysis</code> Run post\u2011capture analytics <p>Identifiers</p> <ul> <li><code>group_id</code>: Logical grouping for related operations.</li> <li><code>operation_id</code>: Unique handle for one capture session. Use it for status, stop, results, and analysis.</li> </ul>"},{"location":"api/fast-api/multi/multi-capture-rxmer/#workflow","title":"Workflow","text":"<ol> <li>Start Capture \u2192 receive <code>group_id</code> and <code>operation_id</code>.</li> <li>Poll Status until <code>state \u2208 [\"completed\",\"stopped\"]</code>.</li> <li>Download Results once finished or stopped.</li> <li>(Optional) Stop Early to end after the current iteration.</li> <li>Run Analysis on the finished capture using <code>operation_id</code> + analysis type.</li> </ol>"},{"location":"api/fast-api/multi/multi-capture-rxmer/#endpoints","title":"Endpoints","text":""},{"location":"api/fast-api/multi/multi-capture-rxmer/#1-start-capture","title":"1) Start Capture","text":"<p>Starts a background RxMER capture with a fixed duration and sample interval.</p> <p>Request <code>POST /advance/multiRxMer/start</code> Body (<code>MultiRxMerRequest</code>):</p> <pre><code>{\n  \"cable_modem\": {\n    \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n    \"ip_address\": \"192.168.0.100\"\n  },\n  \"snmp\": {\n    \"snmpV2C\": { \"community\": \"public\" },\n    \"snmpV3\": {\n      \"username\": \"user\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"password\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"password\"\n    }\n  },\n  \"capture\": {\n    \"parameters\": {\n      \"measurement_duration\": 60,\n      \"sample_interval\": 10\n    }\n  },\n  \"measure\": { \"mode\": 0 }\n}\n</code></pre> <p>Fields</p> <ul> <li><code>cable_modem.mac_address</code> (string) \u2013 CM MAC.</li> <li><code>cable_modem.ip_address</code> (string) \u2013 IPv4/IPv6 address.</li> <li><code>snmp</code> (object) \u2013 Either <code>snmpV2C</code> or <code>snmpV3</code>.</li> <li><code>capture.parameters.measurement_duration</code> (int, s) \u2013 Total runtime.</li> <li><code>capture.parameters.sample_interval</code> (int, s) \u2013 Interval between samples.</li> <li><code>measure.mode</code> (int) \u2013 <code>0</code> = continuous sampling; <code>1</code> = OFDM performance.</li> </ul> <p>Response (<code>MultiRxMerStartResponse</code>):</p> <pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": \"running\",\n  \"message\": null,\n  \"group_id\": \"3bd6f7c107ad465b\",\n  \"operation_id\": \"4aca137c1e9d4eb6\"\n}\n</code></pre> <ul> <li><code>status</code> is <code>\"running\"</code> immediately after start.</li> </ul>"},{"location":"api/fast-api/multi/multi-capture-rxmer/#2-status-check","title":"2) Status Check","text":"<p>Request <code>GET /advance/multiRxMer/status/4aca137c1e9d4eb6</code></p> <p>Response (<code>MultiRxMerStatusResponse</code>):</p> <pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": \"success\",\n  \"message\": null,\n  \"operation\": {\n    \"operation_id\": \"4aca137c1e9d4eb6\",\n    \"state\": \"running\",\n    \"collected\": 2,\n    \"time_remaining\": 50,\n    \"message\": null\n  }\n}\n</code></pre> <p>Operation Fields</p> <ul> <li><code>state</code> \u2208 <code>running | completed | stopped</code></li> <li><code>collected</code> (int) \u2013 number of samples captured so far</li> <li><code>time_remaining</code> (int, s) \u2013 rough remaining seconds</li> <li><code>message</code> (string|null) \u2013 optional details</li> </ul>"},{"location":"api/fast-api/multi/multi-capture-rxmer/#3-download-results","title":"3) Download Results","text":"<p>Request <code>GET /advance/multiRxMer/results/4aca137c1e9d4eb6</code></p> <p>Response</p> <ul> <li><code>Content-Type: application/zip</code></li> <li>Zip name: <code>multiRxMer_&lt;mac&gt;_4aca137c1e9d4eb6.zip</code></li> <li>Contains PNM files like:</li> </ul> <p><code>text   ds_ofdm_rxmer_per_subcar_aabbccddeeff_193_1751762613.bin   ds_ofdm_rxmer_per_subcar_aabbccddeeff_194_1751762613.bin   ...</code></p> <p>Notes</p> <ul> <li>Each file = one snapshot at <code>sample_interval</code> cadence.</li> <li>File count == <code>operation.collected</code>.</li> </ul>"},{"location":"api/fast-api/multi/multi-capture-rxmer/#4-stop-capture-early","title":"4) Stop Capture Early","text":"<p>Request <code>DELETE /advance/multiRxMer/stop/4aca137c1e9d4eb6</code></p> <p>Response (<code>MultiRxMerStatusResponse</code>):</p> <pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": \"stopped\",\n  \"message\": null,\n  \"operation\": {\n    \"operation_id\": \"4aca137c1e9d4eb6\",\n    \"state\": \"stopped\",\n    \"collected\": 4,\n    \"time_remaining\": 42,\n    \"message\": null\n  }\n}\n</code></pre> <ul> <li><code>status</code> is <code>\"stopped\"</code> when accepted.</li> <li>Expect up to one <code>sample_interval</code> for the stop to take effect.</li> </ul>"},{"location":"api/fast-api/multi/multi-capture-rxmer/#5-analysis","title":"5) Analysis","text":"<p>Request <code>POST /advance/multiRxMer/analysis</code> Body (<code>MultiRxMerAnalysisRequest</code>):</p> <pre><code>{\n  \"analysis\": {\n    \"type\": 0\n  },\n  \"output\": {\n    \"type\": 4\n  },\n  \"operation_id\": \"hash-like-string\"\n}\n</code></pre> <p>Analysis Types (<code>analysis.type</code>)</p> Code Name Description Requires Mode <code>0</code> <code>MIN_AVG_MAX</code> Min/avg/max RxMER across samples <code>0</code> <code>1</code> <code>RXMER_HEAT_MAP</code> Time\u00d7frequency heatmap grid <code>0</code> <code>2</code> <code>OFDM_PROFILE_PERFORMANCE</code> Per\u2011subcarrier performance metrics <code>0</code> or <code>1</code> <p>Output Types (<code>output.type</code>)</p> Code Name Description Media Type <code>0</code> <code>JSON</code> Structured JSON body <code>application/json</code> <code>4</code> <code>ARCHIVE</code> ZIP containing multiple output artifacts <code>application/zip</code> <p>Response (<code>MultiRxMerAnalysisResponse</code>):</p> <pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": 0,\n  \"message\": \"Analysis MIN_AVG_MAX completed for group 3bd6f7c107ad465b\",\n  \"data\": { \"min\": 28.5, \"avg\": 31.2, \"max\": 33.8 }\n}\n</code></pre> <ul> <li><code>status</code> <code>0</code> = success; non\u2011zero indicates error (see <code>message</code>).</li> <li> <p><code>data</code> varies by analysis type:</p> </li> <li> <p>MIN_AVG_MAX \u2192 <code>{ \"min\": 28.5, \"avg\": 31.2, \"max\": 33.8 }</code></p> </li> <li>RXMER_HEAT_MAP \u2192 <code>{ \"timestamps\": [1697040000], \"frequencies\": [193000000, 194000000], \"heatmap\": [[30.1, 29.8]] }</code></li> <li>OFDM_PROFILE_PERFORMANCE \u2192 <code>{ \"193\": { \"rxmer\": 31.5, \"snr\": 34.1 }, \"194\": { \"rxmer\": 30.9, \"snr\": 33.7 } }</code></li> </ul> <p>Use canonical schemas in <code>api/routes/advance/multi_rxmer/schemas.py</code> for exact field names and enums.</p>"},{"location":"api/fast-api/multi/multi-capture-rxmer/#timing-polling","title":"Timing &amp; Polling","text":""},{"location":"api/fast-api/multi/multi-capture-rxmer/#capture-timing","title":"Capture Timing","text":"<ul> <li><code>measurement_duration</code> (s) \u2192 total run length.   Example: <code>60</code> means a one\u2011minute capture.</li> <li><code>sample_interval</code> (s) \u2192 period between samples.   Example: <code>10</code> over <code>60</code> seconds \u2192 6 samples.</li> </ul>"},{"location":"api/fast-api/multi/multi-capture-rxmer/#polling-strategy","title":"Polling Strategy","text":"<ul> <li>Poll no more than once per <code>sample_interval</code>.</li> <li><code>time_remaining == 0</code> and <code>state == \"completed\"</code> \u2192 stop polling.</li> </ul>"},{"location":"api/fast-api/multi/multi-capture-rxmer/#results-availability","title":"Results Availability","text":"<ul> <li>When <code>state \u2208 [\"completed\",\"stopped\"]</code>, ZIP is immediately available.</li> <li>Files are produced at sampling time; the archive is just a bundle step.</li> </ul>"},{"location":"api/fast-api/multi/multi-capture-rxmer/#stop-semantics","title":"Stop Semantics","text":"<ol> <li>Current iteration finishes.</li> <li>Final PNM for that iteration is written.</li> <li><code>state \u2192 \"stopped\"</code> (remaining time may be &gt; 0 if mid\u2011interval).</li> </ol>"},{"location":"api/fast-api/multi/multi-capture-rxmer/#compatibility-matrix","title":"Compatibility Matrix","text":"Measure Mode Suited Analyses <code>0</code> <code>MIN_AVG_MAX</code>, <code>RXMER_HEAT_MAP</code>, <code>OFDM_PROFILE_PERFORMANCE</code> <code>1</code> <code>OFDM_PROFILE_PERFORMANCE</code>, <code>MIN_AVG_MAX</code>, <code>RXMER_HEAT_MAP</code> <p>Choose <code>mode=1</code> when you specifically want OFDM performance context; otherwise <code>mode=0</code> is recommended for continuous monitoring.</p>"},{"location":"api/fast-api/multi/multi-capture-rxmer/#conventions","title":"Conventions","text":"<ul> <li>Use generic addresses in examples:   <code>mac_address = \"aa:bb:cc:dd:ee:ff\"</code>, <code>ip_address = \"192.168.0.100\"</code>.</li> <li>Zip name format: <code>multiRxMer_&lt;mac&gt;_4aca137c1e9d4eb6.zip</code>.</li> <li>PNM file name format: <code>ds_ofdm_rxmer_per_subcar_&lt;mac&gt;_&lt;channel_id&gt;_&lt;epoch&gt;.bin</code>.</li> <li>Status codes: prefer 2xx on success; include concise error text in <code>message</code> for failures.</li> </ul>"},{"location":"api/fast-api/multi/analysis/","title":"\ud83d\udcca Advanced Signal Analysis Guides","text":"<p>This directory contains expert-level tutorials and diagnostics guides for analyzing DOCSIS telemetry using PyPNM. Each document focuses on a specific signal processing concept or metric used in proactive network maintenance.</p> Title Description Group Delay Estimation Compute the group delay of OFDM channels to assess timing alignment and echo dispersion. Heatmap Anomaly Detection Generate frequency-based heatmaps to visualize and detect performance anomalies over time. OFDM RxMER Performance \u2013 Part 1 In-depth analysis of OFDM network health using multiple RxMER snapshots (Part\u00a01). Echo Detection in OFDM Identify and characterize echo reflections within OFDM captures to evaluate impulse noise. LTE Phase-Slope Detection \u2013 Part 2 Continuation of LTE artifact analysis focusing on phase-slope gradients (Part\u00a02). LTE Phase-Slope Detection \u2013 Part 1 Detect early LTE interference patterns using slope-phase techniques (Part\u00a01). Understanding Phase Slope Introductory guide to phase slope and its effects on upstream/downstream signal quality. Signal Statistics Overview Perform statistical breakdowns of DOCSIS signal metrics including variance, skew, and distribution."},{"location":"api/fast-api/multi/analysis/group-delay-calculator/","title":"Group Delay Calculator Guide","text":"<p>This guide explains the mathematical foundation and usage of the <code>GroupDelayCalculator</code> class for computing group delay from per-subcarrier complex channel estimates, supporting multi-snapshot coherent averaging and comprehensive output via <code>to_dict()</code>.</p>"},{"location":"api/fast-api/multi/analysis/group-delay-calculator/#1-group-delay-continuous-definition","title":"1. Group Delay: Continuous Definition","text":"<p>For a frequency response $H(f)$, the group delay is defined as:</p> <p>$$ \\tau_g(f) = -\\frac{d}{d\\omega} \\arg\\bigl(H(f)\\bigr), $$</p> <p>where $\\omega = 2\\pi f$ and $\\arg(H(f))$ is the phase of $H(f)$.</p>"},{"location":"api/fast-api/multi/analysis/group-delay-calculator/#2-discrete-approximation","title":"2. Discrete Approximation","text":"<p>Given $K$ subcarriers at frequencies $f_k$ with unwrapped phases</p> <p>$$ \\phi_k = \\mathrm{unwrap}\\bigl(\\angle H[k]\\bigr), $$</p> <p>the discrete group delay per subcarrier is approximated by finite differences:</p> <ul> <li>Forward difference at $k=0$:</li> </ul> <p>$$   \\tau_g[0] = -\\frac{\\phi_1 - \\phi_0}{2\\pi(f_1 - f_0)}   $$</p> <ul> <li>Central difference for $1 \\le k \\le K-2$:</li> </ul> <p>$$   \\tau_g[k] = -\\frac{\\phi_{k+1} - \\phi_{k-1}}{2\\pi(f_{k+1} - f_{k-1})}   $$</p> <ul> <li>Backward difference at $k=K-1$:</li> </ul> <p>$$   \\tau_g[K-1] = -\\frac{\\phi_{K-1} - \\phi_{K-2}}{2\\pi(f_{K-1} - f_{K-2})}   $$</p>"},{"location":"api/fast-api/multi/analysis/group-delay-calculator/#3-multi-snapshot-coherent-averaging","title":"3. Multi-Snapshot Coherent Averaging","text":"<p>To reduce noise, average $M$ snapshots of channel estimates $H^{(m)}[k]$ coherently:</p> <p>$$ \\overline{H}[k] = \\frac{1}{M} \\sum_{m=1}^{M} H^{(m)}[k]. $$</p> <p>Compute group delay on $\\overline{H}[k]$ using the discrete formulas above. Alternatively, compute $\\tau_g^{(m)}[k]$ per snapshot and take the median:</p> <p>$$ \\tau_{g,\\mathrm{med}}[k] = \\mathrm{median}\\bigl{\\tau_g^{(1)}[k],\\dots,\\tau_g^{(M)}[k]\\bigr}. $$</p>"},{"location":"api/fast-api/multi/analysis/group-delay-calculator/#4-class-api","title":"4. Class API","text":"<pre><code>from pypnm import GroupDelayCalculator\n\n# H: array of shape (M, K) or (K,) for single snapshot\n# freqs: array of length K with subcarrier frequencies in Hz\ncalc = GroupDelayCalculator(H, freqs)\n</code></pre> <ul> <li> <p><code>compute_group_delay_full() -&gt; (freqs, tau_g)</code>   Compute group delay for each subcarrier:</p> </li> <li> <p><code>freqs</code>: $K$-length array of frequencies.</p> </li> <li> <p><code>tau_g</code>: $K$-length array of delays in seconds.</p> </li> <li> <p><code>snapshot_group_delay() -&gt; np.ndarray</code>   Returns an $(M, K)$ array of group delays per snapshot.</p> </li> <li> <p><code>median_group_delay() -&gt; (freqs, tau_med)</code>   Compute the median group delay across snapshots:</p> </li> <li> <p><code>freqs</code>: $K$-length array.</p> </li> <li> <p><code>tau_med</code>: $K$-length median delays.</p> </li> <li> <p><code>dataset_info() -&gt; dict</code>   Returns metadata:</p> </li> </ul> <p><code>json   {\"subcarriers\": K, \"snapshots\": M}</code></p> <ul> <li> <p><code>to_dict() -&gt; dict</code>   Returns a dictionary containing:</p> </li> <li> <p><code>dataset_info</code></p> </li> <li><code>freqs</code>, <code>H_raw</code>, <code>H_avg</code></li> <li><code>group_delay_full</code>: <code>{ \"freqs\": [...], \"tau_g\": [...] }</code></li> <li><code>snapshot_group_delay</code>: <code>[[...], ...]</code></li> <li><code>median_group_delay</code>: <code>{ \"freqs\": [...], \"tau_med\": [...] }</code></li> </ul>"},{"location":"api/fast-api/multi/analysis/group-delay-calculator/#5-usage-example","title":"5. Usage Example","text":"<pre><code>import numpy as np\nfrom pypnm import GroupDelayCalculator\n\n# Simulate two snapshots of a two-tap channel\nK = 6\nfreqs = np.linspace(5e6, 6e6, K)\ntau_true = 1e-7\nH1 = 1 + 0.5*np.exp(-1j*2*np.pi*freqs*tau_true)\nH2 = 1 + 0.6*np.exp(-1j*2*np.pi*freqs*(tau_true+1e-9))\nHs = np.vstack([H1, H2])  # shape (2, K)\n\ncalc = GroupDelayCalculator(Hs, freqs)\n\n# Full group delay per subcarrier\nfreqs_full, tau_full = calc.compute_group_delay_full()\n\n# Per-snapshot delays\ntaus = calc.snapshot_group_delay()\n\n# Median group delay\nfreqs_med, tau_med = calc.median_group_delay()\n\n# Dataset info and all data\ndata = calc.to_dict()\n\nprint(\"Full delays:\", tau_full)\nprint(\"Median delays:\", tau_med)\nprint(\"Dataset info:\", data['dataset_info'])\n</code></pre> <p>The <code>to_dict()</code> output can be serialized to JSON for logging or API responses.</p>"},{"location":"api/fast-api/multi/analysis/heatmap-anonomies/","title":"Anomaly Detection in 2D Arrays","text":"<p>This guide describes a pipeline for detecting and localizing anomalous regions in a 2D numerical array (e.g., a heat map) by thresholding its global z-score and extracting bounding boxes around connected anomalies.</p>"},{"location":"api/fast-api/multi/analysis/heatmap-anonomies/#mathematical-formulation","title":"Mathematical Formulation","text":"<p>Given an \\$M \\times N\\$ array of values \\$X_{i,j}\\$:</p> <ol> <li>Global Mean:</li> </ol> <p>$$    \\mu = \\frac{1}{MN} \\sum_{i=1}^M\\sum_{j=1}^N X_{i,j}    $$</p> <ol> <li>Global Standard Deviation:</li> </ol> <p>$$    \\sigma = \\sqrt{\\frac{1}{MN} \\sum_{i=1}^M\\sum_{j=1}^N (X_{i,j} - \\mu)^2}    $$</p> <ol> <li>Z-Score Map:</li> </ol> <p>$$    z_{i,j} = \\frac{X_{i,j} - \\mu}{\\sigma}    $$</p> <ol> <li>Anomaly Mask (for threshold \\$T\\$):</li> </ol> <p>$$    \\text{mask}{i,j} = \\begin{cases}      1, &amp; \\text{if } |z{i,j}| &gt; T \\      0, &amp; \\text{otherwise}    \\end{cases}    $$</p> <ol> <li>Bounding Box Extraction for each connected component (4\u2011connectivity):</li> </ol> <p>$$    \\text{row}{\\min} = \\min{i : \\text{mask}{i,j} = 1} \\    \\text{row}{\\max} = \\max{i : \\text{mask}{i,j} = 1} \\    \\text{col}{\\min} = \\min{j : \\text{mask}{i,j} = 1} \\    \\text{col}{\\max} = \\max{j : \\text{mask}{i,j} = 1}    $$</p>"},{"location":"api/fast-api/multi/analysis/heatmap-anonomies/#json-output-format","title":"JSON Output Format","text":"<p>The detection function returns a JSON object with the threshold and a list of bounding boxes:</p> <pre><code>{\n  \"threshold\": 3.0,\n  \"boxes\": [\n    { \"row_min\": 10, \"col_min\": 20, \"row_max\": 12, \"col_max\": 22 },\n    { \"row_min\": 35, \"col_min\": 40, \"row_max\": 37, \"col_max\": 42 }\n  ]\n}\n</code></pre> <ul> <li>threshold: z-score cutoff \\$T\\$</li> <li>boxes: array of detected regions with top-left \\$(\\text{row}{\\min}, \\text{col}{\\min})\\$ and bottom-right \\$(\\text{row}{\\max}, \\text{col}{\\max})\\$ coordinates</li> </ul>"},{"location":"api/fast-api/multi/analysis/heatmap-anonomies/#algorithm-steps","title":"Algorithm Steps","text":"<ol> <li> <p>Compute statistics</p> </li> <li> <p>Calculate global mean \\$\\mu\\$ and standard deviation \\$\\sigma\\$.</p> </li> <li> <p>Create anomaly mask</p> </li> <li> <p>Compute z-score map and apply threshold \\$T\\$.</p> </li> <li> <p>Connected-component labeling</p> </li> <li> <p>Identify distinct anomaly clusters using 4\u2011connectivity.</p> </li> <li> <p>Extract bounding boxes</p> </li> <li> <p>For each cluster, compute \\$\\min\\$/\\$\\max\\$ row and column indices.</p> </li> <li> <p>Return results</p> </li> <li> <p>Return \\$T\\$ and all bounding boxes in JSON.</p> </li> </ol> <p>\ud83d\udca1 Tip: Choose the threshold \\$T\\$ based on expected noise (e.g., 3\u20134 standard deviations). Use 8\u2011connectivity if you want diagonally-connected anomalies grouped together.</p>"},{"location":"api/fast-api/multi/analysis/multi-rxmer-ofdm-performance-1/","title":"OFDM Profile Performance Analysis","text":"<p>This guide outlines the theory and workflow for measuring DOCSIS\u00a03.1 OFDM channel performance, quantifying capacity margins, and correlating them with error\u2011correction events.</p>"},{"location":"api/fast-api/multi/analysis/multi-rxmer-ofdm-performance-1/#mathematical-foundations","title":"Mathematical Foundations","text":""},{"location":"api/fast-api/multi/analysis/multi-rxmer-ofdm-performance-1/#1-shannon-capacity-limit","title":"1. Shannon Capacity Limit","text":"<p>For each subcarrier, the theoretical maximum bits/sec/Hz is:</p> <p>$$ C = \\log_{2}\\bigl(1 + \\mathrm{SNR}_{\\mathrm{lin}}\\bigr), $$</p> <p>$$ \\mathrm{SNR}{\\mathrm{lin}} = 10^{\\mathrm{SNR}{\\mathrm{dB}} / 10} $$</p>"},{"location":"api/fast-api/multi/analysis/multi-rxmer-ofdm-performance-1/#2-merderived-capacity","title":"2. MER\u2011Derived Capacity","text":"<p>From the average Modulation Error Ratio (MER) in dB per subcarrier:</p> <ol> <li>Convert to linear SNR: \\$10^{\\mathrm{MER}_i/10}\\$.</li> <li>Apply Shannon\u2019s formula.</li> <li>Round down:</li> </ol> <p>$$ C_{\\mathrm{MER},i} = \\left\\lfloor \\log_{2}\\bigl(1 + 10^{\\mathrm{MER}_i/10}\\bigr) \\right\\rfloor. $$</p>"},{"location":"api/fast-api/multi/analysis/multi-rxmer-ofdm-performance-1/#3-profilederived-capacity","title":"3. Profile\u2011Derived Capacity","text":"<p>Using configured per\u2011subcarrier SNR limits from the modulation profile:</p> <p>$$ C_{\\mathrm{profile},i} = \\left\\lfloor \\log_{2}\\bigl(1 + 10^{\\mathrm{SNR}_{\\mathrm{profile},i}/10}\\bigr) \\right\\rfloor. $$</p>"},{"location":"api/fast-api/multi/analysis/multi-rxmer-ofdm-performance-1/#4-capacity-delta","title":"4. Capacity Delta","text":"<p>The margin for each subcarrier:</p> <p>$$ \\Delta C_i = C_{\\mathrm{profile},i} - C_{\\mathrm{MER},i}. $$</p> <p>Positive \\$\\Delta C\\$ indicates margin; negative signals under\u2011margin.</p>"},{"location":"api/fast-api/multi/analysis/multi-rxmer-ofdm-performance-1/#5-fec-counter-aggregation","title":"5. FEC Counter Aggregation","text":"<p>Over the capture interval $[t_0, t_N]\\$, sum forward\u2011error\u2011correction events:</p> <p>$$ \\mathrm{FEC}{\\mathrm{total}} = \\sum{t=t_0}^{t_N}\\sum_j \\mathrm{FEC}_j(t), $$</p> <p>where \\$j\\$ indexes FEC counters (corrected, uncorrectable, etc.).</p>"},{"location":"api/fast-api/multi/analysis/multi-rxmer-ofdm-performance-1/#high-level-workflow","title":"High-Level Workflow","text":"<ol> <li> <p>Compute MER Capacity</p> </li> <li> <p>Retrieve average MER per subcarrier.</p> </li> <li> <p>Calculate \\$C_{\\mathrm{MER},i}\\$.</p> </li> <li> <p>Identify Capture Window</p> </li> <li> <p>Gather all timestamps.</p> </li> <li> <p>Determine start \\$t_0\\$ and end \\$t_N\\$.</p> </li> <li> <p>Aggregate FEC Counters</p> </li> <li> <p>Sum FEC metrics for each codeword counter between \\$t_0\\$ and \\$t_N\\$.</p> </li> <li> <p>Profile Performance Comparison    For each capture timestamp and profile:</p> </li> <li> <p>Compute \\$C_{\\mathrm{profile},i}\\$.</p> </li> <li> <p>Calculate \\$\\Delta C_i\\$ per subcarrier.</p> </li> <li> <p>Assemble Performance Ledger    Compile per-channel results including:</p> </li> <li> <p>Average MER and \\$C_{\\mathrm{MER}}\\$</p> </li> <li>Total FEC counts</li> <li>Time\u2011series of \\$\\Delta C\\$ for each profile</li> </ol>"},{"location":"api/fast-api/multi/analysis/multi-rxmer-ofdm-performance-1/#outcome","title":"Outcome","text":"<p>This process yields a structured performance ledger to:</p> <ul> <li>Assess Capacity Margins: Identify subcarriers with insufficient margin.</li> <li>Correlate Reliability: Link error\u2011correction events to capacity deficits.</li> <li>Monitor Trends: Track performance over time and detect transients.</li> </ul>"},{"location":"api/fast-api/multi/analysis/multi-rxmer-ofdm-performance-1/#workflow-flowchart","title":"Workflow Flowchart","text":"<pre><code>flowchart TD\n    A[Start] --&gt; B[Compute MER Capacity]\n    B --&gt; C[Identify Capture Window]\n    C --&gt; D[Aggregate FEC Counters]\n    D --&gt; E[Profile Performance Comparison]\n    E --&gt; F[Assemble Performance Ledger]\n    F --&gt; G[End]\n</code></pre>"},{"location":"api/fast-api/multi/analysis/ofdm-echo-detection/","title":"OFDM Echo Detector and Coax Cable Propagation Guide","text":"<p>This guide explains the <code>OFDMEchoDetector</code> class, which performs FFT/IFFT-based echo detection on OFDM channel estimates, and provides typical propagation delay values for common coaxial drop cables.</p>"},{"location":"api/fast-api/multi/analysis/ofdm-echo-detection/#1-class-overview","title":"1. Class Overview","text":"<p>The <code>OFDMEchoDetector</code> class:</p> <ul> <li>Accepts a 1-D array of complex OFDM channel estimates (<code>H[k]</code>).</li> <li>Computes the time-domain impulse response via inverse FFT.</li> <li>Identifies the direct path and the first significant echo reflection.</li> <li>Calculates the echo delay and converts it into distance using a configurable propagation speed factor.</li> </ul> <p>Key Methods</p> <ul> <li> <p><code>compute_time_response()</code>   Computes:</p> </li> <li> <p><code>time_axis</code>: $t[n]$ values in seconds.</p> </li> <li> <p><code>time_response</code>: impulse response $h[n]$.</p> </li> <li> <p><code>detect_reflection(threshold_frac, min_separation)</code>   Detects peaks in <code>time_response</code>:</p> </li> <li> <p>Returns a <code>dict</code> containing indices, times, one-way delay, and distance.</p> </li> <li> <p><code>compute_freq_response(time_data)</code>   Optionally applies FFT to reconstruct frequency response from time-domain data.</p> </li> </ul>"},{"location":"api/fast-api/multi/analysis/ofdm-echo-detection/#2-mathematical-foundations","title":"2. Mathematical Foundations","text":"<ol> <li>Inverse FFT</li> </ol> <p>$$    h[n] = \\frac{1}{N} \\sum_{k=0}^{N-1} H[k] \\,e^{j2\\pi k n / N}    $$</p> <ol> <li>Time Axis</li> </ol> <p>$$    t[n] = \\frac{n}{F_s}, \\quad n=0,1,\\ldots,N-1    $$</p> <ol> <li>Reflection Delay</li> </ol> <p>$$    \\Delta t = t_{\\mathrm{echo}} - t_{\\mathrm{direct}}    $$</p> <ol> <li>One-Way Distance</li> </ol> <p>$$    d = \\frac{c_0 \\times \\mathrm{prop_speed_frac} \\times \\Delta t}{2}    $$</p> <ul> <li>$c_0$: speed of light in vacuum.</li> <li><code>prop_speed_frac</code>: velocity factor relative to $c_0$.</li> </ul>"},{"location":"api/fast-api/multi/analysis/ofdm-echo-detection/#3-typical-usage","title":"3. Typical Usage","text":"<ol> <li>Instantiate detector</li> </ol> <p><code>python    detector = OFDMEchoDetector(        H,                 # Complex channel estimates        sample_rate=Fs,    # Sampling rate in Hz        prop_speed_frac=0.87  # Velocity factor    )</code></p> <ol> <li>Compute time-domain response</li> </ol> <p><code>python    t, h = detector.compute_time_response()</code></p> <ol> <li>Detect echo reflection</li> </ol> <p><code>python    result = detector.detect_reflection(        threshold_frac=0.2,  # Fraction of peak direct path magnitude        min_separation=1     # Minimum sample separation between direct and echo    )    print(result)</code></p>"},{"location":"api/fast-api/multi/analysis/ofdm-echo-detection/#4-coax-cable-propagation-delays","title":"4. Coax Cable Propagation Delays","text":"Cable Type Velocity Factor ($% of (c_0$)) Delay (ns/ft) Delay (ns/m) RG-59A/U PE 65.9 1.52 4.99 RG-6/U Quad Shield 84.5 1.18 3.87 RG-11/U Quad Shield 86.0 1.16 3.81 <ul> <li>Delay (ns/ft) = $1/\\mathrm{velocity_factor}$.</li> <li>Delay (ns/m) = Delay (ns/ft) \u00d7 3.28084.</li> </ul>"},{"location":"api/fast-api/multi/analysis/ofdm-echo-detection/#5-references","title":"5. References","text":"<ul> <li>RG-59A/U PE velocity and delay (CableLabs)</li> <li>RG-6/U Quad Shield velocity factors (Manufacturer datasheets)</li> <li>RG-11/U NVP and delay (Technical specifications)</li> </ul> <p>Tip: Use the <code>compute_freq_response</code> method to verify the FFT/IFFT round-trip, ensuring no windowing artifacts affect echo detection.</p>"},{"location":"api/fast-api/multi/analysis/phase-slope-lete-detection-2/","title":"Multi-Resolution Echo Detection Pipeline","text":"<p>This document outlines the high-level steps and supporting mathematics for implementing a multi-resolution phase-slope echo detection workflow. Each step will later map to Python functions and classes.</p>"},{"location":"api/fast-api/multi/analysis/phase-slope-lete-detection-2/#1-data-ingestion","title":"1. Data Ingestion","text":"<p>Collect $M$ independent OFDM channel-estimate snapshots, each of length $K$:</p> <p>$$ H^{(m)}[k],\\quad m=1,\\ldots,M;\\quad k=1,\\ldots,K $$</p> <p>Aggregate into an array of shape $(M, K)$.</p>"},{"location":"api/fast-api/multi/analysis/phase-slope-lete-detection-2/#2-optional-coherent-averaging","title":"2. (Optional) Coherent Averaging","text":"<p>Compute a noise-reduced baseline channel estimate:</p> <p>$$ \\overline H[k] = \\frac{1}{M}\\sum_{m=1}^M H^{(m)}[k] $$</p> <p>Use $\\overline H$ for subsequent steps if desired.</p>"},{"location":"api/fast-api/multi/analysis/phase-slope-lete-detection-2/#3-phase-slope-delay-estimation","title":"3. Phase-Slope Delay Estimation","text":"<p>For each snapshot (or $\\overline H$):</p> <ol> <li>Phase unwrapping:</li> </ol> <p>$$    \\phi_k = \\mathrm{unwrap}\\bigl(\\angle H[k]\\bigr)    $$ 2. Linear fit $\\phi_k \\approx a f_k + b$ via least squares:</p> <p>$$    a = \\frac{\\sum_k (f_k-\\bar f)(\\phi_k-\\bar\\phi)}{\\sum_k (f_k-\\bar f)^2},    \\quad    \\tau_{rt} = -\\frac{a}{2\\pi}.    $$ 3. One-way delay and distance:</p> <p>$$    \\tau = \\frac{|\\tau_{rt}|}{2},    \\quad    d = v\\,\\tau,\\quad v = c_0\\times\\mathrm{prop_speed_frac}.    $$</p>"},{"location":"api/fast-api/multi/analysis/phase-slope-lete-detection-2/#4-per-subcarrier-group-delay-extraction","title":"4. Per-Subcarrier Group-Delay Extraction","text":"<p>Estimate instantaneous group-delay per subcarrier using centered differences:</p> <p>$$ \\tau_k \\approx -\\frac{\\phi_{k+1}-\\phi_{k-1}}{2\\pi(f_{k+1}-f_{k-1})}. $$</p>"},{"location":"api/fast-api/multi/analysis/phase-slope-lete-detection-2/#5-global-flatness-metric","title":"5. Global Flatness Metric","text":"<p>Compute overall mean and standard deviation of \\(\\tau_k) across all $K$ subcarriers:</p> <p>$$ \\mu = \\frac{1}{K} \\sum_{k=1}^K \\tau_k, \\quad \\sigma_{\\mathrm{tot}} = \\sqrt{\\frac{1}{K-1} \\sum_{k=1}^K (\\tau_k - \\mu)^2}. $$</p>"},{"location":"api/fast-api/multi/analysis/phase-slope-lete-detection-2/#6-coarse-bin-analysis-1-mhz-bins","title":"6. Coarse-Bin Analysis (1\u202fMHz bins)","text":"<p>Partition the occupied bandwidth $B$ into $N_b = \\lceil B/1\\mathrm{MHz}\\rceil$ bins. For each bin $j$ with subcarrier set $\\mathcal{K}_j$:</p> <p>$$ \\mu_j = \\frac{1}{|\\mathcal{K}j|} \\sum{k\\in\\mathcal{K}j} \\tau_k, \\quad \\sigma_j = \\sqrt{\\frac{1}{|\\mathcal{K}_j|-1} \\sum{k\\in\\mathcal{K}_j} (\\tau_k - \\mu_j)^2}, $$</p> <p>Define anomaly metric:</p> <p>$$ \\Delta\\sigma_j = |\\sigma_j - \\sigma_{\\mathrm{tot}}|. $$</p>"},{"location":"api/fast-api/multi/analysis/phase-slope-lete-detection-2/#7-anomaly-flagging","title":"7. Anomaly Flagging","text":"<p>Mark bin $j$ as disturbed if</p> <p>$$ \\Delta\\sigma_j &gt; T, $$</p> <p>where $T$ is an empirical threshold based on baseline ripple.</p>"},{"location":"api/fast-api/multi/analysis/phase-slope-lete-detection-2/#8-multi-resolution-refinement","title":"8. Multi-Resolution Refinement","text":"<p>For each flagged 1\u202fMHz bin:</p> <ol> <li>Subdivide into finer bins (e.g., 500\u202fkHz, then 100\u202fkHz).</li> <li>Recompute $\\Delta\\sigma$ in each sub-bin.</li> <li>Continue subdividing regions exceeding $T$ until target resolution is reached.</li> </ol> <p>This hierarchical strategy focuses computation on likely disturbance regions.</p>"},{"location":"api/fast-api/multi/analysis/phase-slope-lete-detection-2/#9-reporting","title":"9. Reporting","text":"<p>Produce a summary of:</p> <ul> <li>Flagged frequency intervals</li> <li>Corresponding \\(\\Delta\\sigma) values</li> <li>Estimated one-way delays \\(\\tau) and distances $d$</li> </ul> <p>This report can be serialized as JSON, plotted, or integrated into monitoring dashboards.</p> <p>Next Steps: Translate each step into Python modules and functions, handling data I/O, phase unwrapping, regression, binning logic, and iterative refinement.</p>"},{"location":"api/fast-api/multi/analysis/phase-slope-lte-detection/","title":"Phase\u2011Slope Echo Detection: Theory and Insights","text":"<p>This guide delves into the theory of phase\u2011slope echo detection, examines how front\u2011end AGC and in\u2011band LTE signals affect group\u2011delay estimates, and presents a multi\u2011resolution scanning strategy to pinpoint disturbances.</p>"},{"location":"api/fast-api/multi/analysis/phase-slope-lte-detection/#1-fundamental-principle","title":"1. Fundamental Principle","text":"<p>A simple two\u2011path channel (direct path + reflection) has the frequency response:</p> <p>$$ H(f) = H_0 + H_1\\,e^{-j2\\pi f\\,\\tau_{rt}}, $$</p> <p>where:</p> <ul> <li>$H_0$ is the direct\u2011path complex gain.</li> <li>$H_1$ is the echo path gain.</li> <li>$\\tau_{rt}$ is the round\u2011trip delay of the echo.</li> </ul> <p>Taking the phase and unwrapping across subcarriers gives:</p> <p>$$ \\varphi(f) = \\arg H(f) \\approx -2\\pi f\\,\\tau_{rt} + \\text{constant}. $$</p> <p>A linear fit $\\varphi(f) \\approx a f + b$ yields slope:</p> <p>$$ a = \\frac{d\\varphi}{df} \\approx -2\\pi\\,\\tau_{rt}, \\quad \\tau_{rt} = -\\frac{a}{2\\pi}. $$</p> <p>Thus, the one\u2011way delay is</p> <p>$$ \\tau = \\frac{|\\tau_{rt}|}{2}, $$</p> <p>and the distance to the reflector:</p> <p>$$ d = v\\,\\tau, $$</p> <p>with propagation velocity $v = c_0 \\times \\mathrm{prop_speed_frac}$.</p>"},{"location":"api/fast-api/multi/analysis/phase-slope-lte-detection/#2-effects-of-agc-and-inband-signals","title":"2. Effects of AGC and In\u2011Band Signals","text":"<ul> <li> <p>AGC dynamics: The Automatic Gain Control adjusts amplifier gain based on total in\u2011band power. A strong LTE signal (e.g., 40\u202fMHz) within a wider OFDM band (e.g., 100\u202fMHz) shifts the AGC operating point.</p> </li> <li> <p>Phase ripple: Gain adjustments introduce frequency\u2011dependent phase shifts (group\u2011delay ripple) that corrupt linear phase assumptions.</p> </li> <li> <p>Impact: The measured slope reflects both echo delay and AGC/equalizer transients until front\u2011end circuits re\u2011settle.</p> </li> </ul>"},{"location":"api/fast-api/multi/analysis/phase-slope-lte-detection/#3-groupdelay-flatness-metric","title":"3. Group\u2011Delay Flatness Metric","text":"<p>Let $\\tau_k$ be the one\u2011way delay estimated at subcarrier $f_k$. Define:</p> <ol> <li>Global statistics:</li> </ol> <p>$$    \\mu = \\frac{1}{K}\\sum_{k=1}^K \\tau_k,    \\quad    \\sigma_{\\mathrm{tot}} = \\sqrt{\\frac{1}{K-1}\\sum_{k=1}^K (\\tau_k - \\mu)^2}.    $$</p> <ol> <li>Local variability: Divide the occupied channel bandwidth $B$ into $N_b$ bins (e.g., 1\u202fMHz each). For bin $j$ with indices $\\mathcal{K}_j$:</li> </ol> <p>$$    \\mu_j = \\frac{1}{|\\mathcal{K}j|}\\sum{k\\in\\mathcal{K}j} \\tau_k,    \\quad    \\sigma_j = \\sqrt{\\frac{1}{|\\mathcal{K}_j|-1}\\sum{k\\in\\mathcal{K}_j}(\\tau_k - \\mu_j)^2}.    $$</p> <ol> <li>Anomaly metric:</li> </ol> <p>$$    \\Delta\\sigma_j = |\\sigma_j - \\sigma_{\\mathrm{tot}}|.    $$</p> <p>Flag bin $j$ as disturbed if $\\Delta\\sigma_j &gt; T$, where $T$ is a threshold based on baseline ripple levels.</p>"},{"location":"api/fast-api/multi/analysis/phase-slope-lte-detection/#4-multiresolution-scanning-strategy","title":"4. Multi\u2011Resolution Scanning Strategy","text":"<ol> <li>Coarse scan: Compute $\\Delta\\sigma_j$ over large bins (e.g., 1\u202fMHz).</li> <li>Bin selection: Mark bins where $\\Delta\\sigma_j &gt; T$.</li> <li>Refinement: Subdivide flagged bins into finer bins (e.g., 500\u202fkHz, then 100\u202fkHz), recompute metrics, and localize disturbances.</li> <li>Repeat: Continue until desired frequency resolution is achieved.</li> </ol> <p>This hierarchical method focuses computation on suspect regions, optimizing performance.</p>"},{"location":"api/fast-api/multi/analysis/phase-slope-lte-detection/#5-practical-considerations","title":"5. Practical Considerations","text":"<ul> <li>Phase unwrapping: Use robust algorithms (e.g., <code>numpy.unwrap</code>) to avoid 2\u03c0 jumps.</li> <li>Threshold tuning: Set $T$ as a multiple (e.g., 3\u00d7) of baseline $\\sigma_{\\mathrm{tot}}$.</li> <li>AGC/EQ modeling: Consider digital filter group\u2011delay and DC\u2011offset compensation.</li> <li>Extensions: Combine with PSD analysis or pilot-correlation to reduce false positives.</li> </ul>"},{"location":"api/fast-api/multi/analysis/phase-slope-lte-detection/#6-references","title":"6. References","text":"<ol> <li>Delay Estimation via Phase Slope, DSPRelated.com</li> <li>Multipath Channel Models and Rake Receivers, WirelessPi</li> </ol> <p>Tip: Always verify AGC settling time and remove large in-band interferers before echo analysis.</p>"},{"location":"api/fast-api/multi/analysis/phase-slope/","title":"Phase\u2011Slope Echo Detection: Theory, Implementation, and Usage","text":"<p>This guide presents the mathematical foundation, class API, and practical usage of the <code>PhaseSlopeEchoDetector</code>, which estimates echo delays and reflector distances from OFDM channel estimates.</p>"},{"location":"api/fast-api/multi/analysis/phase-slope/#1-theory-and-justification","title":"1. Theory and Justification","text":"<p>A simple two\u2011path channel (direct path + reflection) has the frequency response:</p> <p>$$ H(f) = H_0 \\,+\\, H_1 \\;e^{-j2\\pi f\\tau_{rt}}, $$</p> <p>where $\\tau_{rt}$ is the round\u2011trip delay of the echo. Taking the complex phase:</p> <p>$$ \\varphi(f) = \\arg H(f) \\approx -2\\pi f\\,\\tau_{rt} + \\text{constant}. $$</p> <p>Sampling at subcarrier frequencies $f_k$ and unwrapping:</p> <p>$$ \\phi_k = \\mathrm{unwrap}\\bigl(\\angle H[f_k]\\bigr), $$</p> <p>we perform a linear fit:</p> <p>$$ \\phi_k \\approx a\\,f_k + b, $$</p> <p>with slope:</p> <p>$$ a = \\frac{d\\phi}{df} \\approx -2\\pi\\,\\tau_{rt}, \\quad\\Longrightarrow\\quad \\tau_{rt} = -\\frac{a}{2\\pi}. $$</p> <p>The one\u2011way delay is</p> <p>$$ \\tau = \\frac{|\\tau_{rt}|}{2}, $$</p> <p>and the distance to the reflector is</p> <p>$$ d = v \\,\\tau, $$</p> <p>where $v = c_0 \\times \\mathrm{prop_speed_frac}$ is the propagation velocity (fraction of the speed of light).</p>"},{"location":"api/fast-api/multi/analysis/phase-slope/#2-class-api","title":"2. Class API","text":"<p>The <code>PhaseSlopeEchoDetector</code> exposes a simple interface for delay estimation:</p> <pre><code>class PhaseSlopeEchoDetector:\n    def __init__(\n        self,\n        H: array-like,\n        f: Sequence[float],\n        prop_speed_frac: float = 0.87\n    ):\n        \"\"\"\n        Parameters:\n        -----------\n        H : array-like\n            Channel estimates per subcarrier (shape: \\(K\\), or \\((M,K)\\), or \\((...,K,2)\\) for real/imag pairs).\n        f : Sequence[float]\n            Subcarrier frequencies in Hz (length \\(K\\)).\n        prop_speed_frac : float\n            Fraction of light speed for wave propagation (default 0.87).\n        \"\"\"\n\n    def estimate_delay(self) -&gt; float:\n        \"\"\"Return the signed round\u2011trip delay \\(\\tau_{rt}\\) in seconds.\"\"\"\n\n    def detect_echo(self) -&gt; dict:\n        \"\"\"\n        Perform detection and return:\n          - `delay_rt_s`: signed round\u2011trip delay (s)\n          - `delay_s`: positive one\u2011way delay (s)\n          - `distance_m`: one\u2011way distance to reflector (m)\n        \"\"\"\n\n    def dataset_info(self) -&gt; dict:\n        \"\"\"Return metadata: `{ 'subcarriers': K, 'snapshots': M }`.\"\"\"\n\n    def to_dict(self) -&gt; dict:\n        \"\"\"Return a comprehensive dict of inputs, parameters, and results.\"\"\"\n</code></pre>"},{"location":"api/fast-api/multi/analysis/phase-slope/#3-practical-usage","title":"3. Practical Usage","text":"<ol> <li>Compute the phase slope:</li> </ol> <p><code>python    detector = PhaseSlopeEchoDetector(H, f, prop_speed_frac=0.9)    results = detector.detect_echo()</code> 2. Inspect <code>results['delay_s']</code> and <code>results['distance_m']</code> for one\u2011way delay and reflector distance. 3. Use <code>detector.to_dict()</code> to serialize full inputs and outputs for logging or further analysis.</p>"},{"location":"api/fast-api/multi/analysis/phase-slope/#4-references","title":"4. References","text":"<ol> <li>Delay Estimation via Phase Slope \u2014 DSPRelated.com</li> <li>Multipath Channel Models and Rake Receivers \u2014 WirelessPi</li> </ol> <p>Tip: Ensure phase unwrapping is robust (e.g., via <code>numpy.unwrap</code>) before fitting. Small frequency spacing improves delay resolution.</p>"},{"location":"api/fast-api/multi/analysis/signal-statistics/","title":"Signal Statistics Guide","text":"<p>This guide describes the key time-domain statistics computed by the <code>SignalStatistics</code> class, explaining each metric\u2019s meaning and practical applications in signal processing.</p>"},{"location":"api/fast-api/multi/analysis/signal-statistics/#overview","title":"Overview","text":"<p>Time-domain statistics summarize raw signal samples using simple formulas. They provide insights into signal characteristics such as:</p> <ul> <li>Central tendency (mean, median)</li> <li>Dispersion (variance, standard deviation, MAD)</li> <li>Shape (skewness, kurtosis)</li> <li>Extremes (peak-to-peak, crest factor)</li> <li>Frequency proxies (zero-crossing rate)</li> </ul> <p>These metrics are widely used for anomaly detection, quality assessment, feature extraction for machine learning, and diagnostic monitoring.</p>"},{"location":"api/fast-api/multi/analysis/signal-statistics/#metrics-and-definitions","title":"Metrics and Definitions","text":"<p>Given a sequence of $N$ samples $x_1, x_2, \\dots, x_N$ with mean $\\mu$:</p> Statistic Definition Interpretation / Use Mean $\\displaystyle \\mu = \\frac{1}{N}\\sum_{i=1}^N x_i$ DC offset or bias; used for baseline correction Median Middle value of sorted ${x_i}$ Robust central tendency; insensitive to outliers Variance $\\displaystyle \\sigma^2 = \\frac{1}{N}\\sum_{i=1}^N (x_i - \\mu)^2$ Dispersion measure; basis for power and energy analyses Standard Deviation ($\\sigma$) $\\displaystyle \\sigma = \\sqrt{\\sigma^2}$ Spread around mean; indicates noise level Mean Absolute Deviation $\\displaystyle \\mathrm{MAD} = \\frac{1}{N}\\sum_{i=1}^N \\lvert x_i - \\mu\\rvert$ Robust dispersion; less sensitive to outliers Power $\\displaystyle P = \\frac{1}{N}\\sum_{i=1}^N x_i^2$ Energy per sample; key for signal strength and SNR Peak-to-Peak $\\displaystyle \\max_i x_i - \\min_i x_i$ Dynamic range; checks for clipping or saturation Crest Factor $\\displaystyle \\frac{\\max_i \\lvert x_i\\rvert}{\\sqrt{P}}$ Peak prominence relative to average power; important in audio Skewness $\\displaystyle \\frac{1}{N\\sigma^3}\\sum_{i=1}^N (x_i - \\mu)^3$ Distribution asymmetry; indicates DC shifts or bursts Kurtosis $\\displaystyle \\frac{1}{N\\sigma^4}\\sum_{i=1}^N (x_i - \\mu)^4$ Tail heaviness relative to Gaussian; spots impulses/spikes Zero-Crossing Rate (ZCR) $\\displaystyle \\frac{1}{N-1}\\sum_{i=1}^{N-1} \\mathbf{1}[x_i x_{i+1}&lt;0]$ Proxy for frequency content; higher ZCR \u2192 higher frequencies Zero Crossings Total count of sign changes: $\\sum_{i=1}^{N-1} \\mathbf{1}[x_i x_{i+1}&lt;0]$ Basic oscillation count; complements ZCR"},{"location":"api/fast-api/multi/analysis/signal-statistics/#practical-applications","title":"Practical Applications","text":"<ol> <li> <p>Anomaly Detection    Sudden spikes in kurtosis or a high crest factor can indicate faults or transient events.</p> </li> <li> <p>Quality Assessment    Noise level is quantified by $\\sigma$ and MAD; peak-to-peak highlights clipping or saturation.</p> </li> <li> <p>Feature Extraction    These metrics serve as features in machine learning models for classification, regression, or clustering.</p> </li> <li> <p>Monitoring &amp; Diagnostics    Tracking mean and power over time helps detect drift, component aging, or environmental changes.</p> </li> </ol> <p>Tip: Always normalize or detrend your signal (remove its mean $\\mu$) before computing higher-order moments (skewness, kurtosis) to avoid bias from DC offsets.</p>"},{"location":"api/fast-api/multi/rest/multi-rxmer-min-avg-max/","title":"PyPNM MultiRxMer MIN_AVG_MAX Result","text":"<p>This document outlines the structure and meaning of the JSON returned by the <code>POST /advance/multiRxMer/analysis</code> endpoint when <code>analysis_type = 0</code> (MIN_AVG_MAX).</p>"},{"location":"api/fast-api/multi/rest/multi-rxmer-min-avg-max/#top-level-response","title":"\ud83d\udd04 Top-Level Response","text":"Field Type Description mac_address string MAC address of the modem being analyzed status integer Status code (0 = success) message string Descriptive status message data object Dictionary keyed by OFDM Channel ID"},{"location":"api/fast-api/multi/rest/multi-rxmer-min-avg-max/#channel-breakdown-datachannel_id-repeated-for-n-channels","title":"\ud83d\udd01 Channel Breakdown (<code>data.&lt;channel_id&gt;</code>) \u2014 Repeated for N channels","text":"<p>Each key in the <code>data</code> object corresponds to one OFDM channel. The value is an object with RxMER statistics:</p>"},{"location":"api/fast-api/multi/rest/multi-rxmer-min-avg-max/#measurement-arrays","title":"\ud83d\udcc8 Measurement Arrays","text":"Field Type Description min float[] Per-subcarrier minimum RxMER values avg float[] Per-subcarrier average RxMER values max float[] Per-subcarrier maximum RxMER values frequency float[] Frequency values (Hz or MHz) per subcarrier precision integer Decimal places of precision"},{"location":"api/fast-api/multi/rest/multi-rxmer-min-avg-max/#signal-statistics-signal_statistics","title":"\ud83d\udcca Signal Statistics (<code>signal_statistics</code>)","text":"<p>Each of the three measurement series (<code>min</code>, <code>avg</code>, <code>max</code>) includes statistical summaries:</p>"},{"location":"api/fast-api/multi/rest/multi-rxmer-min-avg-max/#common-stats-format","title":"\u2795 Common Stats Format","text":"Metric Type Description mean float Mean value of the series median float Median value std float Standard deviation variance float Variance power float Signal power peak_to_peak float Max - Min of signal mean_abs_deviation float Mean absolute deviation skewness float Skewness of the distribution kurtosis float Kurtosis of the distribution crest_factor float Crest factor = peak amplitude / RMS zero_crossing_rate float Frequency of zero crossings (normalized) zero_crossings integer Raw count of zero crossings <p>\u26a0\ufe0f Each measurement (<code>min</code>, <code>avg</code>, <code>max</code>) contains its own set of stats.</p>"},{"location":"api/fast-api/multi/rest/multi-rxmer-min-avg-max/#example-skeleton","title":"\ud83e\udde0 Example Skeleton","text":""},{"location":"api/fast-api/multi/rest/multi-rxmer-min-avg-max/#json-structure-supporting-multiple-channels","title":"\ud83d\udce6 JSON Structure Supporting Multiple Channels","text":"<pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": 0,\n  \"message\": \"Analysis MIN_AVG_MAX completed for group &lt;group_id&gt;\",\n  \"data\": {\n    \"&lt;channel_id_1&gt;\": {\n      \"min\": [/* float */],\n      \"avg\": [/* float */],\n      \"max\": [/* float */],\n      \"frequency\": [/* float */],\n      \"precision\": 2,\n      \"signal_statistics\": {\n        \"min\": {\n          \"mean\": 0.0,\n          \"median\": 0.0,\n          \"std\": 0.0,\n          \"variance\": 0.0,\n          \"power\": 0.0,\n          \"peak_to_peak\": 0.0,\n          \"mean_abs_deviation\": 0.0,\n          \"skewness\": 0.0,\n          \"kurtosis\": 0.0,\n          \"crest_factor\": 0.0,\n          \"zero_crossing_rate\": 0.0,\n          \"zero_crossings\": 0\n        },\n        \"avg\": {\n          \"mean\": 0.0,\n          \"median\": 0.0,\n          \"std\": 0.0,\n          \"variance\": 0.0,\n          \"power\": 0.0,\n          \"peak_to_peak\": 0.0,\n          \"mean_abs_deviation\": 0.0,\n          \"skewness\": 0.0,\n          \"kurtosis\": 0.0,\n          \"crest_factor\": 0.0,\n          \"zero_crossing_rate\": 0.0,\n          \"zero_crossings\": 0\n        },\n        \"max\": {\n          \"mean\": 0.0,\n          \"median\": 0.0,\n          \"std\": 0.0,\n          \"variance\": 0.0,\n          \"power\": 0.0,\n          \"peak_to_peak\": 0.0,\n          \"mean_abs_deviation\": 0.0,\n          \"skewness\": 0.0,\n          \"kurtosis\": 0.0,\n          \"crest_factor\": 0.0,\n          \"zero_crossing_rate\": 0.0,\n          \"zero_crossings\": 0\n        }\n      }\n    },\n    \"&lt;channel_id_2&gt;\": {\n      /* same structure as channel_id_1 */\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/multi/rest/multi-rxmer-min-avg-max/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>The <code>data</code> field may contain multiple channel objects, each keyed by its OFDM channel ID.</li> <li>All measurement arrays (<code>min</code>, <code>avg</code>, <code>max</code>, <code>frequency</code>) are expected to be of equal length.</li> <li>Precision is provided for display/rounding guidance.</li> <li>All statistics are calculated per channel.</li> </ul> <p>\ud83d\udcc2 For full field definitions, refer to: <code>api/routes/advance/multi_rxmer/schemas.py</code></p>"},{"location":"api/fast-api/single/","title":"Index","text":""},{"location":"api/fast-api/single/#cable-modem-diagnostic-api-reference","title":"\ud83e\uddea Cable Modem Diagnostic API Reference","text":""},{"location":"api/fast-api/single/#single-shot-pnm-operations","title":"\ud83d\udee0\ufe0f Single-Shot PNM Operations","text":"<p>This reference serves as the single-shot FastAPI REST API landing point for all major PNM (Proactive Network Maintenance) diagnostic operations. It consolidates the key FastAPI documentation pages for DOCSIS 3.0/3.1 cable modem monitoring, analysis, and reporting designed for both on-demand and automated diagnostics workflows.</p>"},{"location":"api/fast-api/single/#downstream-ds-operations","title":"\ud83d\udce1 Downstream (DS) Operations","text":"Markdown Description OFDM MER Margin OFDM OFDM Channel Estimation OFDM channel distortion/echo analysis OFDM Constellation Display Visual representation of modulation symbols OFDM FEC Summary OFDM Forward Error Correction analysis OFDM Modulation Profile Bit-loading per subcarrier and profile usage OFDM RxMER Raw RxMER data, summary, and graphing OFDM Channel Stats OFDM channel stats: frequency, power, MER SC-QAM Downstream Stats Downstream SC-QAM channel stats Histogram Downstream power-level histogram Spectrum Analyzer Downstream sweep capture"},{"location":"api/fast-api/single/#upstream-us-operations","title":"\ud83d\udcf6 Upstream (US) Operations","text":"Markdown Description OFDMA Pre-Equalization Upstream OFDMA tap coefficient capture OFDMA Channel Stats OFDMA upstream channel stats SC-QAM Pre-Equalization SC-QAM upstream pre-equalization SC-QAM Upstream Stats SC-QAM upstream stats"},{"location":"api/fast-api/single/#frequency-division-duplex-fdd","title":"Frequency Division Duplex (FDD)","text":"Markdown Description Diplexer Band Edge Capability Supported diplexer frequency range Diplexer Configuration Diplexer system settings"},{"location":"api/fast-api/single/#cable-modem-functions","title":"\ud83e\uddfe Cable Modem Functions","text":"Markdown Description Diplexer Configuration Diplexer system settings Event Log CM Event log access Reset Cable Modem Remote cable modem reset System Description SNMP system identity (sysDescr) System Uptime Uptime from SNMP (sysUpTime)"},{"location":"api/fast-api/single/#pypnm-system","title":"\u2699\ufe0f PyPNM System","text":"Markdown Description System Configuration Retrieve or update PyPNM SNMP settings System Log Download PyPNM backend log file File Operations Search, retrieve, and analyze uploaded PNM files"},{"location":"api/fast-api/single/#overview","title":"\ud83d\udcd8 Overview","text":"<p>This API provides a comprehensive suite of diagnostic endpoints for Proactive Network Maintenance (PNM) in DOCSIS-based cable modem networks. These endpoints allow for real-time and historical data retrieval, signal quality assessment, and analysis of both upstream and downstream channels.</p> <p>After starting the FastAPI service locally, visit http://localhost:8000/docs to explore the interactive Swagger documentation.</p> <p>All endpoints use <code>POST</code> requests and accept JSON payloads containing a cable modem's MAC or IP address. Most responses include structured data and optionally visualizations or downloadable diagnostics.</p>"},{"location":"api/fast-api/single/#pysnmp-system-configuration","title":"PySNMP System Configuration","text":"Endpoint Description `POST /pypnm/system/config/get Retrieve current system configuration. `POST /pypnm/system/config/update Update the system configuration."},{"location":"api/fast-api/single/#system-information","title":"\ud83d\udda5\ufe0f System Information","text":"Endpoint Description <code>POST /system/sysdescr</code> Retrieves the system description (<code>sysDescr</code>) of the cable modem, indicating hardware/software details. <code>POST /system/uptime</code> Retrieves the modem's uptime in seconds since the last reboot."},{"location":"api/fast-api/single/#event-logs","title":"\ud83d\udcc4 Event Logs","text":"Endpoint Description <code>POST /docs/dev/eventLog</code> Retrieves DOCSIS event logs, including critical errors (e.g., ranging failures, T3/T4 timeouts). <code>POST /docs/dev/reset</code> Sends a reset command to the cable modem."},{"location":"api/fast-api/single/#interface-channel-statistics","title":"\ud83d\udcf6 Interface &amp; Channel Statistics","text":"Endpoint Description <code>POST /docs/if31/system/diplexer</code> Retrieves diplexer settings that define frequency split between upstream and downstream. <code>POST /docs/if31/ds/ofdm/profile/stats</code> Returns OFDM profile usage stats including codewords, errors, and profile IDs. <code>POST /docs/if31/ds/ofdm/chan/stats</code> Physical stats for OFDM downstream channels: channel ID, PLC power, center frequency. <code>POST /docs/if31/us/ofdma/chan/stats</code> Retrieves OFDMA upstream channel data: transmit power, active subcarriers, symbol rates, etc. <code>POST /docs/if30/ds/scqam/chan/stats</code> SC-QAM downstream signal quality: power levels, frequency, modulation. <code>POST /docs/if30/us/atdma/chan/stats</code> ATDMA upstream info: frequency, modulation, pre-equalization, power levels. <code>POST /docs/if30/us/atdma/chan/preEqualization</code> ATDMA upstream info: frequency, modulation, pre-equalization, power levels."},{"location":"api/fast-api/single/#pnm-general-diagnostics","title":"\ud83d\udd27 PNM: General Diagnostics","text":"Endpoint Description <code>POST /docs/pnm/files</code> Upload or retrieve PNM files for further analysis or visualization. <code>POST /docs/pnm/spectrumAnalyzer</code> Captures a downstream spectrum snapshot to identify ingress or interference. <code>POST /docs/pnm/ds/histogram</code> Returns downstream SNR and MER histograms indicating signal quality distribution. <code>POST /docs/pnm/ds/ofdm/rxMer</code> Retrieves RxMER (Receive MER) values across OFDM subcarriers. <code>POST /docs/pnm/ds/ofdm/constDisplay</code> Retrieves OFDM constellation data for visualization and noise analysis. <code>POST /docs/pnm/ds/ofdm/fecSummary</code> Summarizes FEC performance: corrected/uncorrected codewords and error correction health. <code>POST /docs/pnm/ds/ofdm/chanEstimation</code> Retrieves downstream channel estimation data (impulse noise, group delay). <code>POST /docs/pnm/ds/ofdm/modulationProfile</code> Returns modulation profile and subcarrier bit-loading info. <code>POST /docs/pnm/us/ofdma/preEqualization</code> Gets upstream pre-equalization coefficients to assess plant impairments. <code>POST /docs/pnm/lld/latencyReport</code> Retrieves Low Latency DOCSIS metrics like queue delay and flow behavior."},{"location":"api/fast-api/single/#pnm-rxmer-measurements","title":"\ud83d\udcca PNM: RxMER Measurements","text":"Endpoint Description <code>POST /docs/pnm/ds/ofdm/rxMer/getMeasurement</code> Gets the latest RxMER snapshot per subcarrier. <code>POST /docs/pnm/ds/ofdm/rxMer/getAnalysis</code> Generates visual plots (e.g., heatmap, line graph) of RxMER data."},{"location":"api/fast-api/single/#pnm-fec-summary","title":"\u2699\ufe0f PNM: FEC Summary","text":"Endpoint Description <code>POST /docs/pnm/ds/ofdm/fecSummary/getMeasurment</code> Retrieves OFDM Forward Error Correction stats (corrected vs uncorrected codewords, profile)."},{"location":"api/fast-api/single/#pnm-channel-estimation","title":"\ud83d\udcd0 PNM: Channel Estimation","text":"Endpoint Description <code>POST /docs/pnm/ds/ofdm/channelEstCoeff/getMeasurement</code> Fetch raw channel estimation coefficient data. <code>POST /docs/pnm/ds/ofdm/channelEstCoeff/getAnalysis</code> Analyze channel distortion metrics (e.g., group delay, frequency response)."},{"location":"api/fast-api/single/#pnm-constellation-display","title":"\ud83d\udef0\ufe0f PNM: Constellation Display","text":"Endpoint Description <code>POST /docs/pnm/ds/ofdm/constDisplay/getMeasurement</code> Capture raw constellation symbols from cable modem. <code>POST /docs/pnm/ds/ofdm/constDisplay/getAnalysis</code> Generate plots and detect modulation anomalies or impairments."},{"location":"api/fast-api/single/#pnm-upstream-pre-equalization","title":"\ud83d\udce1 PNM: Upstream Pre-Equalization","text":"Endpoint Description <code>POST /docs/pnm/us/ofdma/preEqualization/getMeasurement</code> Gets complex tap coefficients from upstream channel. <code>POST /docs/pnm/us/ofdma/preEqualization/getAnalysis</code> Derives metrics like magnitude, phase, and group delay from raw taps."},{"location":"api/fast-api/single/#pnm-advance-operation-and-analysis","title":"PNM Advance Operation and Analysis","text":"Method Endpoint Description Request Model Response Model POST <code>/advance/multiRxMer/start</code> Start a periodic RxMER capture <code>MultiRxMerRequest</code> <code>MultiRxMerStartResponse</code> GET <code>/advance/multiRxMer/status/{op_id}</code> Get current state &amp; sample count for this op path param <code>operation_id</code> <code>MultiRxMerStatusResponse</code> GET <code>/advance/multiRxMer/results/{op_id}</code> Retrieve all timestamped transaction IDs &amp; files path param <code>operation_id</code> <code>MultiRxMerResultsResponse</code> POST <code>/advance/multiRxMer/stop/{op_id}</code> Signal capture to stop after current iteration path param <code>operation_id</code> <code>MultiRxMerStatusResponse</code>"},{"location":"api/fast-api/single/#pnm-file-management","title":"\ud83d\udcc1 PNM: File Management","text":"Endpoint Description <code>POST /docs/pnm/files/searchFiles</code> <code>POST /docs/pnm/files/getFiles</code> Lists all available PNM files by MAC address or filtering criteria. <code>POST /docs/pnm/files/pushFile</code> Uploads a new PNM measurement file to the system. <code>POST /docs/pnm/files/getAnalysis</code> Produces a visual output (e.g., spectrum or RxMER graph) from a selected PNM file."},{"location":"api/fast-api/single/#common-request-format","title":"\ud83d\udd01 Common Request Format","text":"<p>Most endpoints follow this JSON structure:</p> <p>```json {   \"mac_address\": \"a0:b1:c2:d3:e4:f5\",   \"ip_address\": \"192.168.100.1\"   \"snmp\": {     \"snmpV2C\": {       \"community\": \"private\"     },     \"snmpV3\": {       \"username\": \"string\",       \"securityLevel\": \"noAuthNoPriv\",       \"authProtocol\": \"MD5\",       \"authPassword\": \"string\",       \"privProtocol\": \"DES\",       \"privPassword\": \"string\"     }   } } ````</p> <ul> <li><code>mac_address</code>: Accepts formats like <code>aabbccddeeff</code>, <code>aabb.ccdd.eeff</code>, or <code>aa:bb:cc:dd:ee:ff</code>.</li> <li><code>ip_address</code>: Supports both IPv4 and IPv6 addresses.</li> </ul>"},{"location":"api/fast-api/single/#docsis-mib-support","title":"\ud83d\udcda DOCSIS MIB Support","text":"<p>This API is based on industry-standard DOCSIS MIBs including:</p> <ul> <li><code>DOCS-IF-MIB</code> \u2013 Defines the core MIB objects for DOCSIS 1.x and 2.0 interfaces.</li> <li><code>DOCS-IF3-MIB</code> \u2013 Extends DOCSIS MIBs with additional objects introduced in DOCSIS 3.0.</li> <li><code>DOCS-IF31-MIB</code> \u2013 Defines objects for DOCSIS 3.1 cable modems, including OFDM channels.</li> <li><code>DOCS-PNM-MIB</code> \u2013 Specifies Proactive Network Maintenance (PNM) MIBs for DOCSIS devices.</li> <li><code>IETF Interfaces MIB</code> \u2013 Standard MIB for network interface management across devices.</li> </ul> <p>These MIBs define SNMP-accessible metrics used to assess modem performance, error correction, and signal health across the DOCSIS network.</p>"},{"location":"api/fast-api/single/diplexer-configuration/","title":"DOCSIS 3.1 System Diplexer API","text":"<p>This API provides insight into the diplexer configuration of a DOCSIS 3.1 cable modem. Diplexers define the frequency split between upstream and downstream communication paths, and understanding these boundaries is essential for validating modem operation within network spectrum plans.</p> <p>The endpoint returns both capability indicators (hardware support) and configured frequency band edges for upstream and downstream paths. This is particularly useful for network provisioning, troubleshooting misconfigured splits, and aligning cable modem profiles with CMTS expectations.</p> <p>Use this API to audit modem band plans and ensure compatibility with mid-split and high-split deployments.</p>"},{"location":"api/fast-api/single/diplexer-configuration/#endpoint","title":"\ud83d\udce1 Endpoint","text":"<p>POST <code>/docs/if31/system/diplexer</code></p> <p>This endpoint retrieves the DOCSIS 3.1 diplexer configuration and capability values from a cable modem.</p>"},{"location":"api/fast-api/single/diplexer-configuration/#request-body-json","title":"\ud83d\udce5 Request Body (JSON)","text":"<pre><code>{\n  \"cable_modem\": {\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\", \n  \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/diplexer-configuration/#request-fields","title":"\ud83d\udd11 Request Fields","text":"Field Type Description mac_address string MAC address of the cable modem ip_address string IP address of the cable modem snmp object SNMPv2c or SNMPv3 configuration credentials"},{"location":"api/fast-api/single/diplexer-configuration/#response-body","title":"\ud83d\udce4 Response Body","text":"<pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": 0,\n  \"message\": null,\n  \"results\": {\n    \"diplexer\": {\n      \"diplexer_capability\": 28,\n      \"cfg_band_edge\": 204000000,\n      \"ds_lower_capability\": 3,\n      \"cfg_ds_lower_band_edge\": 258000000,\n      \"ds_upper_capability\": 2,\n      \"cfg_ds_upper_band_edge\": 1794000000\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/diplexer-configuration/#response-fields","title":"\ud83d\udcca Response Fields","text":"Field Type Description diplexer_capability int Upstream/Downstream diplexer capability code cfg_band_edge int Configured upstream band edge frequency (Hz) ds_lower_capability int Downstream lower frequency capability code cfg_ds_lower_band_edge int Configured downstream lower band edge (Hz) ds_upper_capability int Downstream upper frequency capability code cfg_ds_upper_band_edge int Configured downstream upper band edge (Hz)"},{"location":"api/fast-api/single/diplexer-configuration/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>This endpoint is used to extract modem hardware capabilities and software configuration for DOCSIS diplexers.</li> <li>Frequencies are provided in Hertz (Hz).</li> <li>Capability codes are device-specific and defined in CableLabs specifications.</li> </ul>"},{"location":"api/fast-api/single/docsis-base-configuration/","title":"DOCSIS Base Capability","text":"<p>This API endpoint retrieves the DOCSIS Radio Frequency (RF) specification version supported by a cable modem (CM) or Cable Modem Termination System (CMTS). It is based on the object <code>docsIf31DocsisBaseCapability</code> defined in the DOCSIS-IF3-MIB.</p>"},{"location":"api/fast-api/single/docsis-base-configuration/#background","title":"\ud83d\udcc1 Background","text":"<p>The legacy DOCSIS-IF-MIB defined in RFC-4546 lacks support for OFDM channels introduced in DOCSIS 3.1 and higher. To address this, the DOCSIS 3.1 OSSI Working Group introduced new MIB objects under the <code>docsIf31MibObjects</code> subtree.</p> <p>The object <code>docsIf31DocsisBaseCapability</code> reports the DOCSIS RF specification version:</p> <ul> <li>For Cable Modems, it indicates the supported DOCSIS version.</li> <li>For CMTS, it reflects the highest DOCSIS version the system supports.</li> </ul> <p>This object supersedes <code>docsIfDocsisBaseCapability</code> in RFC-4546.</p>"},{"location":"api/fast-api/single/docsis-base-configuration/#mib-object-definition","title":"MIB Object Definition","text":"<pre><code>ClabsDocsisVersion ::= TEXTUAL-CONVENTION\n    SYNTAX INTEGER {\n        other (0),\n        docsis10 (1),\n        docsis11 (2),\n        docsis20 (3),\n        docsis30 (4),\n        docsis31 (5),\n        docsis40 (6)\n    }\n</code></pre>"},{"location":"api/fast-api/single/docsis-base-configuration/#endpoint","title":"\ud83d\udef0\ufe0f Endpoint","text":"<p>POST <code>/docs/if31/docsis/baseCapability</code></p> <p>Retrieves the supported DOCSIS RF version from the cable modem.</p>"},{"location":"api/fast-api/single/docsis-base-configuration/#request-body","title":"\ud83d\udcdf Request Body","text":"<pre><code>{\n  \"cable_modem\": {\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\", \n  \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/docsis-base-configuration/#fields","title":"\ud83d\udd11 Fields","text":"Field Type Description <code>mac_address</code> string Target CM MAC address <code>ip_address</code> string Target CM IP address <code>snmp</code> object SNMPv2c or SNMPv3 credentials"},{"location":"api/fast-api/single/docsis-base-configuration/#response","title":"\ud83d\udce4 Response","text":"<p>Returns the DOCSIS version supported by the device.</p>"},{"location":"api/fast-api/single/docsis-base-configuration/#response-schema","title":"\ud83d\udcc8 Response Schema","text":"Field Type Description <code>mac_address</code> string Target MAC address <code>status</code> int Status code (0 = success) <code>message</code> string Result message <code>results.docsis_version</code> string DOCSIS version as enum string (e.g. <code>DOCSIS_40</code>) <code>results.clabs_docsis_version</code> int Integer value from ClabsDocsisVersion enum"},{"location":"api/fast-api/single/docsis-base-configuration/#example-response","title":"\u2705 Example Response","text":"<pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": 0,\n  \"message\": \"DOCSIS Base Capability retrieved successfully.\",\n  \"results\": {\n    \"docsis_version\": \"DOCSIS_40\",\n    \"clabs_docsis_version\": 6\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/event-log/","title":"DOCSIS Device Event Log","text":""},{"location":"api/fast-api/single/event-log/#endpoint","title":"\ud83d\udce1 Endpoint","text":"<p>POST <code>/docs/dev/eventLog</code></p> <p>Fetches the device event log from a DOCSIS modem using SNMP, which may include critical operational events, ranging issues, T3/T4 timeouts, and other system messages.</p>"},{"location":"api/fast-api/single/event-log/#request-body-json","title":"\ud83d\udcc5 Request Body (JSON)","text":"<pre><code>{\n  \"cable_modem\": {\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\", \n  \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/event-log/#json-response","title":"\ud83d\udce4 JSON Response","text":"<pre><code>{\n  \"mac_address\": \"a1:b2:c3:d4:e5:f6\",\n  \"status\": 0,\n  \"message\": null,\n  \"logs\": [\n    {\n      \"docsDevEvFirstTime\": \"2025-07-02T13:14:20\",\n      \"docsDevEvLastTime\": \"2025-07-02T13:14:36\",\n      \"docsDevEvCounts\": 2,\n      \"docsDevEvLevel\": 5,\n      \"docsDevEvId\": 85010200,\n      \"docsDevEvText\": \"TCS Partial Service;CM-MAC=a1:b2:c3:d4:e5:f6;CMTS-MAC=00:90:f0:01:00:00;CM-QOS=1.1;CM-VER=4.0;\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api/fast-api/single/event-log/#response-field-details","title":"\ud83d\udcd8 Response Field Details","text":"Field Type Description <code>mac_address</code> string MAC address of the cable modem <code>status</code> int 0 = success, non-zero indicates failure <code>logs</code> array List of log entries reported by the device <code>docsDevEvFirstTime</code> string First occurrence of the event (ISO 8601 timestamp) <code>docsDevEvLastTime</code> string Most recent occurrence of the event (ISO 8601 timestamp) <code>docsDevEvCounts</code> int Number of times the event has occurred <code>docsDevEvLevel</code> int Severity level (higher values = more critical; 1 = low, 7 = emergency) <code>docsDevEvId</code> int Numeric event identifier <code>docsDevEvText</code> string Human-readable message text, typically includes MAC, CMTS, and version info"},{"location":"api/fast-api/single/event-log/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>Event levels range from 0 (emergency) to 7 (debug) following syslog severity conventions.</li> <li>Useful for diagnosing service disruptions, reboot causes, CMTS interactions, and firmware issues.</li> <li>The event text is often semi-structured; further parsing may be needed for analytics.</li> <li>Some modems may limit the number of stored log entries or rotate them over time.</li> </ul>"},{"location":"api/fast-api/single/histogram/","title":"PNM Operations \u2013 Downstream Histogram Measurement API","text":""},{"location":"api/fast-api/single/histogram/#endpoint","title":"\ud83d\udce1 Endpoint","text":"<p>POST <code>/docs/pnm/ds/histogram/getMeasurement</code></p> <p>Captures and returns histogram distribution data from a DOCSIS cable modem's downstream channel. Useful for identifying noise distribution, symmetry, and signal stability.</p>"},{"location":"api/fast-api/single/histogram/#request-body-json","title":"\ud83d\udce5 Request Body (JSON)","text":"<pre><code>{\n  \"cable_modem\": {\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\", \n  \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/histogram/#fields","title":"\ud83d\udd11 Fields","text":"Field Type Description mac_address string MAC address of the cable modem ip_address string IP address of the cable modem snmp object SNMPv2c or SNMPv3 credentials sample_duration int Number of seconds to capture histogram data"},{"location":"api/fast-api/single/histogram/#response-body","title":"\ud83d\udce4 Response Body","text":"<pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": 0,\n  \"message\": null,\n  \"data\": {\n    \"data\": [\n      {\n        \"status\": \"SUCCESS\",\n        \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n        \"symmetry\": 2,\n        \"dwell_count\": 1406250000,\n        \"hit_counts\": [0, 0, 0, 2, 5, 20, 50, 134, 512, 1503, 3205, 5980, 11392, 20856, 38901, 55210, 78452, 68800, 47032, 29300, 14502, 6230, 1830, 520, 82, 4, 0, 0]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/histogram/#response-fields","title":"\ud83d\udcca Response Fields","text":"Field Type Description mac_address string MAC of the modem where capture was executed status int 0 = success message string Optional message or null data object Container for histogram capture results \u21b3 data[] array List of histogram samples \u21b3\u21b3 status string Capture status: SUCCESS, TIMEOUT, or ERROR \u21b3\u21b3 symmetry int Indicates histogram symmetry (ideal = 0, deviation = noise) \u21b3\u21b3 dwell_count int Number of samples collected during capture \u21b3\u21b3 hit_counts int[] Array of bin hits (distribution of energy over time)"},{"location":"api/fast-api/single/histogram/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>Histogram captures are valuable for tracking transient noise or interference in DOCSIS downstream.</li> <li>The <code>symmetry</code> field helps estimate noise floor characteristics.</li> <li>Higher <code>dwell_count</code> implies better statistical representation of the link.</li> <li>Bin sizes and ranges are implementation-defined and fixed per firmware/CM vendor.</li> </ul> <p>\ud83d\udcc2 For decoding logic, see <code>src/pnm/analysis/histogram_processor.py</code></p>"},{"location":"api/fast-api/single/reset-cm/","title":"DOCSIS Device Reset","text":""},{"location":"api/fast-api/single/reset-cm/#endpoint","title":"\ud83d\udce1 Endpoint","text":"<p>POST <code>/docs/dev/reset</code></p> <p>Initiates a remote reset (reboot) of the specified DOCSIS cable modem via SNMP.</p>"},{"location":"api/fast-api/single/reset-cm/#request-body-json","title":"\ud83d\udcc5 Request Body (JSON)","text":"<pre><code>{\n  \"cable_modem\": {\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\", \n  \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/reset-cm/#json-response","title":"\ud83d\udce4 JSON Response","text":"<pre><code>{\n  \"mac_address\": \"a1:b2:c3:d4:e5:f6\",\n  \"status\": 0,\n  \"message\": \"Reset command sent to cable modem at 192.168.0.1 successfully.\",\n  \"data\": null\n}\n</code></pre>"},{"location":"api/fast-api/single/reset-cm/#response-field-details","title":"\ud83d\udcd8 Response Field Details","text":"Field Type Description <code>mac_address</code> string MAC address of the targeted cable modem <code>status</code> int 0 = success, non-zero indicates failure <code>message</code> string Success or error message with IP/MAC detail <code>data</code> null Reserved for future use or extended diagnostics"},{"location":"api/fast-api/single/reset-cm/#notes","title":"\ud83d\udcc3 Notes","text":"<ul> <li>Make sure the SNMP credentials are valid and the modem is reachable.</li> <li>This operation reboots the modem and may temporarily disrupt service.</li> <li>Use this for remote troubleshooting, recovery, or provisioning workflows.</li> </ul>"},{"location":"api/fast-api/single/spectrum-analyzer/","title":"PNM Operations \u2013 Spectrum Analyzer","text":"<p>This API enables remote spectrum capture and signal inspection from a DOCSIS modem. It is designed for proactive diagnostics and RF analysis of the downstream OFDM path.</p> <p>\ud83d\udccc Important: You must choose a start and end frequency that lie within the modem's configured diplexer band. Use the diplexer configuration endpoint to verify allowed frequency boundaries:</p> <p>POST: <code>/docs/if31/system/diplexer</code></p> <p>\ud83d\udc49 API Guide \u2013 Diplexer Configuration</p> <p>\u26a0\ufe0f Notice: A modem can only scan one direction at a time \u2014 either downstream or upstream. Attempting to scan both directions simultaneously is not supported.</p>"},{"location":"api/fast-api/single/spectrum-analyzer/#endpoint","title":"\ud83d\udce1 Endpoint","text":"<p>POST <code>/docs/pnm/ds/ofdm/spectrumAnalyzer/getMeasurement</code></p> <p>Performs a downstream OFDM spectrum capture from a DOCSIS cable modem. This operation converts raw spectrum amplitude data into a readable floating-point format for further signal processing, anomaly detection, and visualization.</p>"},{"location":"api/fast-api/single/spectrum-analyzer/#request-body-json","title":"\ud83d\udce5 Request Body (JSON)","text":"<pre><code>{\n  \"mac_address\": \"a1:b2:c3:d4:e5:f6\",\n  \"ip_address\": \"192.168.0.1\",\n  \"snmp\": {\n    \"snmpV2C\": { \"community\": \"private\" },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  },\n  \"parameters\": {\n    \"inactivity_timeout\": 100,\n    \"first_segment_center_freq\": 108000000,\n    \"last_segment_center_freq\": 1002000000,\n    \"segment_freq_span\": 1000000,\n    \"num_bins_per_segment\": 256,\n    \"noise_bw\": 150,\n    \"window_function\": 1,\n    \"num_averages\": 1,\n    \"spectrum_retrieval_type\": 1\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/spectrum-analyzer/#request-fields","title":"\ud83d\udd11 Request Fields","text":"Field Type Description <code>mac_address</code> string MAC address of the cable modem <code>ip_address</code> string IP address of the cable modem <code>snmp.snmpV2C.community</code> string SNMPv2c community string <code>snmp.snmpV3.*</code> string SNMPv3 credentials and security settings <code>parameters.inactivity_timeout</code> int Timeout before aborting idle spectrum acquisition <code>parameters.first_segment_center_freq</code> int Start frequency (Hz) of the first spectrum segment <code>parameters.last_segment_center_freq</code> int End frequency (Hz) of the last spectrum segment <code>parameters.segment_freq_span</code> int Frequency span per segment (Hz) <code>parameters.num_bins_per_segment</code> int Number of FFT bins per segment <code>parameters.noise_bw</code> int Equivalent noise bandwidth <code>parameters.window_function</code> int Window function index (e.g., Hanning, Rectangular) <code>parameters.num_averages</code> int Number of averages per segment <code>parameters.spectrum_retrieval_type</code> int Retrieval type (e.g., 1 = capture &amp; return raw and float data)"},{"location":"api/fast-api/single/spectrum-analyzer/#json-response","title":"\ud83d\udce4 JSON Response","text":"<pre><code>{\n  \"mac_address\": \"a1:b2:c3:d4:e5:f6\",\n  \"status\": 0,\n  \"message\": null,\n  \"data\": {\n    \"data\": [\n      {\n        \"status\": \"SUCCESS\",\n        \"Channel ID\": 0,\n        \"MAC Address\": \"a1:b2:c3:d4:e5:f6\",\n        \"First Segment Center Frequency\": 300000000,\n        \"Last Segment Center Frequency\": 900000000,\n        \"Segment Frequency Span\": 1000000,\n        \"Number of Bins Per Segment\": 256,\n        \"Equivalent Noise Bandwidth\": 150,\n        \"Window Function\": 1,\n        \"Bin Frequency Spacing\": 3906.25,\n        \"Spectrum Analysis Data Length\": 307712,\n        \"Spectrum Analysis Data\": \"&lt;Spectrum-Data&gt;:HEX\", \n        \"Number of Bin Segments\": 256,\n        \"Amplitude Bin Segments Float\": [\n          [/* Segment 1 floats */],\n          [/* Segment 2 floats */]\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/spectrum-analyzer/#response-field-breakdown","title":"\ud83d\udcca Response Field Breakdown","text":"Field Type Description <code>status</code> string Status of the operation (e.g., SUCCESS, ERROR) <code>Channel ID</code> int Channel ID of the OFDM measurement <code>MAC Address</code> string MAC address of the modem <code>First Segment Center Frequency</code> int Center frequency (Hz) of the first spectrum segment <code>Last Segment Center Frequency</code> int Center frequency (Hz) of the last spectrum segment <code>Segment Frequency Span</code> int Frequency range (Hz) per spectrum segment <code>Number of Bins Per Segment</code> int Number of frequency bins used in each segment <code>Equivalent Noise Bandwidth</code> int Filter bandwidth used during FFT measurement <code>Window Function</code> int FFT window type identifier (e.g., 1 = Hanning) <code>Bin Frequency Spacing</code> float Frequency spacing between each FFT bin (Hz) <code>Spectrum Analysis Data Length</code> int Total byte length of the raw spectrum data <code>Spectrum Analysis Data</code> string Raw spectrum amplitude data in hexadecimal format <code>Number of Bin Segments</code> int Number of segments included in the spectrum capture <code>Amplitude Bin Segments Float</code> array List of floating-point amplitude values per segment"},{"location":"api/fast-api/single/spectrum-analyzer/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>Raw spectrum data is preserved in <code>Spectrum Analysis Data</code> for future decoding.</li> <li><code>Amplitude Bin Segments Float</code> is pre-processed for visualization and signal quality inspection.</li> <li>This data can be used to detect notches, roll-off, ingress noise, and other RF anomalies.</li> <li>Make sure the requested frequency range is within the modem\u2019s diplexer capability using <code>/docs/if31/system/diplexer</code>.</li> <li>Modems cannot perform both upstream and downstream spectrum scans simultaneously.</li> </ul>"},{"location":"api/fast-api/single/system-description/","title":"DOCSIS System Description","text":""},{"location":"api/fast-api/single/system-description/#endpoint","title":"\ud83d\udce1 Endpoint","text":"<p>POST <code>/system/sysDescr</code></p> <p>Retrieves basic system identity and firmware metadata from a DOCSIS cable modem using SNMP. This includes hardware revision, vendor, software/bootloader versions, and device model.</p>"},{"location":"api/fast-api/single/system-description/#request-body-json","title":"\ud83d\uddd3\ufe0f Request Body (JSON)","text":"<pre><code>{\n  \"mac_address\": \"a1:b2:c3:d4:e5:f6\",\n  \"ip_address\": \"192.168.0.1\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/system-description/#json-response","title":"\ud83d\udce4 JSON Response","text":"<pre><code>{\n  \"mac_address\": \"a1:b2:c3:d4:e5:f6\",\n  \"status\": 0,\n  \"message\": null,\n  \"results\": {\n    \"sys_descr\": {\n        \"HW_REV\": \"1.0\",\n        \"VENDOR\": \"LANCity\",\n        \"BOOTR\": \"NONE\",\n        \"SW_REV\": \"1.0.0\",\n        \"MODEL\": \"LCPET-3\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/system-description/#response-field-details","title":"\ud83d\udcc3 Response Field Details","text":"Field Type Description <code>mac_address</code> string MAC address of the queried device <code>status</code> int 0 = success; non-zero indicates failure <code>results</code> object Contains the parsed sysDescr fields <code>hw_rev</code> string Hardware revision reported by the device <code>vendor</code> string Manufacturer name parsed from sysDescr <code>boot_rev</code> string Bootloader version string <code>sw_rev</code> string Software (firmware) version string <code>model</code> string Model identifier reported by the device <code>is_empty</code> boolean True if parsing failed or response was empty"},{"location":"api/fast-api/single/system-description/#notes","title":"\ud83d\udcd2 Notes","text":"<ul> <li>Data is derived from the SNMP <code>sysDescr</code> OID (<code>1.3.6.1.2.1.1.1.0</code>) and parsed using known vendor patterns.</li> <li>Useful for populating device metadata dashboards or validation checks.</li> <li><code>is_empty = true</code> typically means the response could not be parsed into structured fields.</li> </ul>"},{"location":"api/fast-api/single/up-time/","title":"DOCSIS System Uptime","text":""},{"location":"api/fast-api/single/up-time/#endpoint","title":"\ud83d\udce1 Endpoint","text":"<p>POST <code>/system/upTime</code></p> <p>Retrieves the current system uptime of a DOCSIS cable modem using SNMP. Useful for identifying device reboots and system availability.</p>"},{"location":"api/fast-api/single/up-time/#request-body-json","title":"\ud83d\uddd3\ufe0f Request Body (JSON)","text":"<pre><code>{\n  \"mac_address\": \"a1:b2:c3:d4:e5:f6\",\n  \"ip_address\": \"192.168.0.1\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/up-time/#json-response","title":"\ud83d\udec4 JSON Response","text":"<pre><code>{\n  \"mac_address\": \"a1:b2:c3:d4:e5:f6\",\n  \"status\": 0,\n  \"message\": null,\n  \"results\": {\n    \"uptime\": \"0:13:11.180000\"\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/up-time/#response-field-details","title":"\ud83d\udcdc Response Field Details","text":"Field Type Description <code>mac_address</code> string MAC address of the queried device <code>status</code> int 0 = success; non-zero indicates failure <code>uptime</code> string Formatted uptime in <code>HH:MM:SS.microseconds</code>"},{"location":"api/fast-api/single/up-time/#notes","title":"\ud83d\udcd2 Notes","text":"<ul> <li>SNMP OID used: <code>1.3.6.1.2.1.1.3.0</code> (system uptime in hundredths of a second)</li> <li>Returned uptime is converted into human-readable format.</li> <li>Uptime can be used to detect unexpected reboots or system resets.</li> </ul>"},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/","title":"PNM Operations \u2013 Downstream OFDM Channel Estimation","text":"<p>This API provides critical visibility into the downstream physical layer of DOCSIS 3.1 OFDM channels by retrieving and analyzing channel estimation coefficients. These complex values\u2014captured per subcarrier\u2014represent the modem's internal estimation of the channel response, allowing operators to assess signal fidelity, detect multipath, and quantify in-channel distortion.</p> <p>The <code>/getMeasurement</code> endpoint returns raw complex coefficients (real/imaginary pairs), while the <code>/getAnalysis</code> endpoint derives key physical characteristics including:</p> <ul> <li>Magnitude response (signal attenuation across frequency)</li> <li>Group delay (timing variation due to multipath)</li> <li>Per-subcarrier complex response</li> <li>Echo detection (early/late reflection signatures using phase slope or time-domain analysis)</li> </ul> <p>Echo detection is particularly important in identifying micro-reflections and impedance mismatches in the coaxial plant, which often lead to burst errors, degraded MER, and overall link instability.</p> <p>Engineers can use this data for detailed spectral diagnostics, plant maintenance planning, and troubleshooting elusive performance issues. The structured output also includes summary signal statistics and supports export to JSON or Excel for visualization and offline analysis.</p>"},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ul> <li>Get Measurement</li> <li>Get Analysis</li> <li>Get Measurement Statistics</li> <li>Analysis and Output Types</li> <li>Measurement Status Codes</li> </ul>"},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/#measurement-status-codes","title":"Measurement Status Codes","text":"Code Meaning Context 0 SUCCESS Measurement completed and results are valid 1 CAPTURE FILE MISSING SNMP points to a missing or unavailable binary data file 2 PARTIAL DATA Measurement file present, but content is truncated or incomplete 3 INVALID FORMAT Measurement file is unreadable or has invalid structure 4 UNSUPPORTED MODEM RESPONSE Modem responded with unexpected or unhandled data layout 5 TIMEOUT SNMP timeout or capture request did not complete within time limit 6 NOT IMPLEMENTED Capture or parsing functionality not supported on current platform"},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/#get-measurement","title":"Get Measurement","text":""},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/#endpoint","title":"\ud83d\udeb1 Endpoint","text":"<p>POST <code>/docs/pnm/ds/ofdm/channelEstCoeff/getMeasurement</code></p> <p>Retrieves complex channel estimation coefficients from a DOCSIS 3.1 cable modem for a downstream OFDM channel. These values are used to assess multipath and in-channel distortion.</p>"},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/#request-body-json","title":"\ud83d\udcd2 Request Body (JSON)","text":"<pre><code>{\n  \"cable_modem\": {\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\", \n  \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/#json-response","title":"\ud83d\udce4 JSON Response","text":"<pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": 0,\n  \"message\": null,\n  \"measurement\": {\n    \"data\": [\n      {\n        \"status\": \"SUCCESS\",\n        \"pnm_header\": {\n          \"file_type\": \"PNN\",\n          \"file_type_version\": 2,\n          \"major_version\": 1,\n          \"minor_version\": 0,\n          \"capture_time\": 1751835648\n        },\n        \"channel_id\": 197,\n        \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n        \"zero_frequency\": 1217600000,\n        \"first_active_subcarrier_index\": 148,\n        \"subcarrier_spacing\": 50000,\n        \"coefficient_data_length\": 15200,\n        \"number_of_coefficients\": 3800,\n        \"occupied_channel_bandwidth\": 190000000,\n        \"value_units\": \"[Real(I),Imaginary(Q)]\",\n        \"values\": [[...]]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/#response-field-breakdown","title":"\ud83d\udcd8\ufe0f Response Field Breakdown","text":"Field Type Description <code>pnm_header</code> object Metadata from the capture file <code>channel_id</code> int Downstream OFDM channel ID <code>mac_address</code> string MAC address of the modem <code>zero_frequency</code> int (Hz) Subcarrier index 0 reference frequency <code>first_active_subcarrier_index</code> int First usable subcarrier index <code>subcarrier_spacing</code> int (Hz) Frequency spacing between subcarriers (typically 50 kHz) <code>coefficient_data_length</code> int Raw data size in bytes <code>number_of_coefficients</code> int Number of complex coefficients <code>occupied_channel_bandwidth</code> int (Hz) Width of the active OFDM channel <code>value_units</code> string Format of the data, e.g. <code>[Real, Imaginary]</code> <code>values</code> list List of complex coefficients (length = number_of_coefficients)"},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/#get-analysis","title":"Get Analysis","text":""},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/#endpoint_1","title":"\ud83d\udeb1 Endpoint","text":"<p>POST <code>/docs/pnm/ds/ofdm/channelEstCoeff/getAnalysis</code></p> <p>Performs structured analysis of the channel estimation coefficients, including magnitude, group delay, and complex tap data per subcarrier. Includes signal quality statistics such as skewness, variance, and power.</p> <p>\ufe0f Due to response size, use tools like Postman or cURL instead of Swagger UI.</p>"},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/#request-body-json_1","title":"\ud83d\udcd2 Request Body (JSON)","text":"<pre><code>{\n  \"cable_modem\": {\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  },\n  \"analysis\": {\n    \"type\": 0\n  },\n  \"output\": {\n    \"type\": 0\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/#json-response_1","title":"\ud83d\udce4 JSON Response","text":"<pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": 0,\n  \"data\": {\n    \"analysis\": [\n      {\n        \"pnm_header\": {\n          \"file_type\": \"PNN\",\n          \"file_type_version\": 2,\n          \"major_version\": 1,\n          \"minor_version\": 0,\n          \"capture_time\": 1751835918\n        },\n        \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n        \"channel_id\": 197,\n        \"frequency_unit\": \"Hz\",\n        \"magnitude_unit\": \"dB\",\n        \"group_delay_unit\": \"microsecond\",\n        \"complex_unit\": \"[Real, Imaginary]\",\n        \"carrier_values\": {\n          \"occupied_channel_bandwidth\": 190000000,\n          \"carrier_count\": 3800,\n          \"frequency\": [],\n          \"magnitude\": [],\n          \"group_delay\": [],\n          \"complex\": [],\n          \"complex_dimension\": \"2\"\n        },\n        \"signal_statistics_target\": \"magnitude\",\n        \"signal_statistics\": {\n          \"mean\": 8.72,\n          \"median\": 10.03,\n          \"std\": 4.64,\n          \"variance\": 21.49,\n          \"power\": 97.55,\n          \"peak_to_peak\": 41.23,\n          \"mean_abs_deviation\": 3.40,\n          \"skewness\": -1.86,\n          \"kurtosis\": 8.07,\n          \"crest_factor\": 2.66,\n          \"zero_crossing_rate\": 0.113,\n          \"zero_crossings\": 430\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/#get-measurement-statistics","title":"Get Measurement Statistics","text":""},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/#endpoint_2","title":"\ud83d\udeb1 Endpoint","text":"<p>POST <code>/docs/pnm/ds/ofdm/channelEstCoeff/getMeasurementStatistics</code></p> <p>Returns high-level measurement statistics for downstream OFDM Channel Estimation Coefficients.</p>"},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/#request-body-json_2","title":"\ud83d\udcd2 Request Body (JSON)","text":"<pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"ip_address\": \"172.19.24.23\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/#json-response_2","title":"\ud83d\udce4 JSON Response","text":"<pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": 0,\n  \"message\": \"Measurement Statistics for OFDM Channel Estimation Coefficients\",\n  \"results\": {\n    \"DS_OFDM_CHAN_EST_COEF\": [\n      {\n        \"index\": &lt;SNMP_INDEX&gt;,\n        \"channel_id\": &lt;CHANNEL_ID&gt;,\n        \"entry\": {\n          \"docsPnmCmOfdmChEstCoefTrigEnable\": false,\n          \"docsPnmCmOfdmChEstCoefAmpRipplePkToPk\": 1484,\n          \"docsPnmCmOfdmChEstCoefAmpRippleRms\": 379,\n          \"docsPnmCmOfdmChEstCoefAmpSlope\": 1,\n          \"docsPnmCmOfdmChEstCoefGrpDelayRipplePkToPk\": 112741,\n          \"docsPnmCmOfdmChEstCoefGrpDelayRippleRms\": 3164,\n          \"docsPnmCmOfdmChEstCoefMeasStatus\": 4,\n          \"docsPnmCmOfdmChEstCoefFileName\": \"ds-chan-est_48_1752333441.bin\",\n          \"docsPnmCmOfdmChEstCoefAmpMean\": 4468,\n          \"docsPnmCmOfdmChEstCoefGrpDelaySlope\": 5,\n          \"docsPnmCmOfdmChEstCoefGrpDelayMean\": 1558514\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/#analysis-and-output-types","title":"Analysis and Output Types","text":""},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/#analysistype","title":"<code>analysis.type</code>","text":"Value Type Description <code>0</code> BASIC Magnitude, group delay, complex taps per subcarrier"},{"location":"api/fast-api/single/ds/ofdm/channel-estimation/#outputtype","title":"<code>output.type</code>","text":"Value Format Description <code>0</code> JSON Structured JSON for dashboards and offline processing <code>1</code> CSV Not supported <code>2</code> XLSX Excel-compatible output for visualization or detailed statistical breakdowns"},{"location":"api/fast-api/single/ds/ofdm/constellation-display/","title":"PNM Operations \u2013 Downstream OFDM Constellation Display","text":"<p>This API provides access to raw constellation symbols captured from DOCSIS 3.1 downstream OFDM channels, enabling visual inspection of I/Q (in-phase and quadrature) data. The constellation display is a cornerstone of RF diagnostics it reveals the actual symbol behavior at the demodulator and can highlight impairments such as phase noise, amplitude distortion, ingress, or burst noise.</p> <p>By capturing and plotting these samples as a scatter plot, network operators can immediately assess modulation clarity, clustering, and the presence of impairments. This is particularly valuable when diagnosing subtle or transient RF issues that might not manifest in standard metrics like RxMER or FEC.</p> <p>Due to the volume of data returned, this endpoint is best consumed via Postman, CLI tools, or automation scripts rather than SwaggerUI. The capture supports per-channel modulation information, subcarrier mapping, and sampling configuration for precise control and reproducibility.</p>"},{"location":"api/fast-api/single/ds/ofdm/constellation-display/#endpoint","title":"\ud83d\udd0a Endpoint","text":"<p>POST <code>/docs/pnm/ds/ofdm/constellationDisplay/getMeasurement</code></p> <p>Captures downstream OFDM constellation symbols from a DOCSIS cable modem for visualization as a scatter plot (I/Q points). Due to the volume of data returned, Postman or CLI tools are recommended over SwaggerUI.</p>"},{"location":"api/fast-api/single/ds/ofdm/constellation-display/#request-body-json","title":"\ud83d\udcc5 Request Body (JSON)","text":"<pre><code>{\n  \"cable_modem\": {\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\", \n  \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/constellation-display/#request-fields","title":"\ud83d\udd11 Request Fields","text":"Field Type Description <code>mac_address</code> string MAC address of the cable modem <code>ip_address</code> string IP address of the cable modem <code>snmp.snmpV2C.community</code> string SNMPv2c community string <code>snmp.snmpV3.*</code> string SNMPv3 credentials and security options <code>modulation_order_offset</code> int Modulation offset (profile-based modulation shift) <code>number_sample_symbol</code> int Number of I/Q samples to retrieve (e.g., 8192)"},{"location":"api/fast-api/single/ds/ofdm/constellation-display/#json-response","title":"\ud83d\udce4 JSON Response","text":"<pre><code>{\n  \"mac_address\": \"a1:b2:c3:d4:e5:f6\",\n  \"status\": 0,\n  \"message\": null,\n  \"data\": {\n    \"data\": [\n      {\n        \"status\": \"SUCCESS\",\n        \"pnm_header\": {\n          \"file_type\": \"PNN\",\n          \"file_type_version\": 3,\n          \"major_version\": 1,\n          \"minor_version\": 0,\n          \"capture_time\": 1751825651\n        },\n        \"channel_id\": 197,\n        \"mac_address\": \"a1:b2:c3:d4:e5:f6\",\n        \"subcarrier_zero_frequency\": 1217600000,\n        \"actual_modulation_order\": \"qam16\",\n        \"num_sample_symbols\": 8192,\n        \"subcarrier_spacing\": 50000,\n        \"sample_length\": 32768,\n        \"value_units\": \"[Real(I), Imaginary(Q)]\",\n        \"values\": [\n          [2.8161, -0.9989],\n          [3.1241,  0.2345],\n          ...\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/constellation-display/#response-field-breakdown","title":"\ud83d\udcca Response Field Breakdown","text":"Field Type Description <code>status</code> string Status of the constellation capture (e.g., SUCCESS) <code>pnm_header.*</code> object Metadata about the capture format, version, and timestamp <code>channel_id</code> int Downstream channel ID <code>mac_address</code> string MAC address of the modem <code>subcarrier_zero_frequency</code> int Base subcarrier frequency (Hz) <code>actual_modulation_order</code> string OFDM modulation type (e.g., <code>qam16</code>, <code>qam1024</code>, <code>qam4096</code>) <code>num_sample_symbols</code> int Number of constellation sample points <code>subcarrier_spacing</code> int Frequency spacing between subcarriers (Hz) <code>sample_length</code> int Total data length (samples \u00d7 2) <code>value_units</code> string Units of the sample values (I/Q format) <code>values</code> array List of I/Q sample pairs representing constellation points"},{"location":"api/fast-api/single/ds/ofdm/constellation-display/#visualization","title":"\ud83d\udcc8 Visualization","text":"<ul> <li>Data from <code>values</code> can be plotted as I (x-axis) vs Q (y-axis) for a scatter plot.</li> <li>Ideal clusters represent good modulation; noise and spread may indicate impairment.</li> </ul>"},{"location":"api/fast-api/single/ds/ofdm/constellation-display/#notes","title":"\ud83d\udcc3 Notes","text":"<ul> <li>Large payloads are not suitable for SwaggerUI. Use Postman, <code>curl</code>, or Python clients.</li> <li>Useful for evaluating demodulation performance and diagnosing OFDM reception impairments.</li> <li>\u26a0\ufe0f There may be multiple OFDM channels returned in the <code>data</code> array. Each entry corresponds to a distinct downstream OFDM channel.</li> </ul>"},{"location":"api/fast-api/single/ds/ofdm/fec-summary/","title":"PNM Operations \u2013 Downstream OFDM FEC Summary API","text":"<p>This API enables proactive monitoring of DOCSIS 3.1 cable modems by retrieving Forward Error Correction (FEC) summary statistics for downstream OFDM channels. FEC summaries are crucial for evaluating the health of the RF link, identifying packet loss trends, and assessing the effectiveness of error correction mechanisms over time.</p> <p>Operators can select between a 10-minute high-resolution view or a 24-hour long-term overview using the fec_summary_type parameter. The results are organized by modulation profile and include timestamps with raw codeword counts\u2014total, corrected, and uncorrectable\u2014offering clear insights into persistent versus transient issues.</p> <p>This API supports secure SNMP-based collection and is often used in automation pipelines or integrated into network performance dashboards.</p>"},{"location":"api/fast-api/single/ds/ofdm/fec-summary/#endpoint","title":"\ud83d\udcf0 Endpoint","text":"<p>POST <code>/docs/pnm/ds/ofdm/fecSummary/getMeasurement</code></p> <p>Retrieves the Forward Error Correction (FEC) summary data from DOCSIS 3.1 downstream OFDM channels.</p>"},{"location":"api/fast-api/single/ds/ofdm/fec-summary/#request-body-json","title":"\ud83d\udce5 Request Body (JSON)","text":"<pre><code>{\n  \"cable_modem\": {\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\", \n  \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n},\n  \"fec_summary_type\": 2\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/fec-summary/#fields","title":"\ud83d\udd11 Fields","text":"Field Type Description mac_address string MAC address of the cable modem ip_address string IP address of the cable modem snmp object SNMPv2c or SNMPv3 credentials fec_summary_type int 2 = 10-minute (1 record/sec),  3 = 24-hour summary (1 record/min)"},{"location":"api/fast-api/single/ds/ofdm/fec-summary/#response-body","title":"\ud83d\udce6 Response Body","text":"<pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": 0,\n  \"message\": null,\n  \"data\": {\n    \"data\": [\n      {\n        \"status\": \"SUCCESS\",\n        \"channel_id\": 32,\n        \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n        \"summary_type\": 2,\n        \"num_profiles\": 3,\n        \"fec_summary_data\": [\n          {\n            \"profile_id\": 255,\n            \"number_of_sets\": 600,\n            \"codeword_entries\": [\n              {\n                \"timestamp\": 2157931112,\n                \"total_codewords\": 297467904,\n                \"corrected_codewords\": 0,\n                \"uncorrectable_codewords\": 0\n              }\n            ]\n          },\n          {\n            \"profile_id\": 0,\n            \"number_of_sets\": 600,\n            \"codeword_entries\": [\n              {\n                \"timestamp\": 2157931112,\n                \"total_codewords\": 50331648,\n                \"corrected_codewords\": 0,\n                \"uncorrectable_codewords\": 0\n              }\n            ]\n          },\n          {\n            \"profile_id\": 4,\n            \"number_of_sets\": 600,\n            \"codeword_entries\": [\n              {\n                \"timestamp\": 2157931112,\n                \"total_codewords\": 0,\n                \"corrected_codewords\": 0,\n                \"uncorrectable_codewords\": 0\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/fec-summary/#response-fields","title":"\ud83d\udcca Response Fields","text":"Field Type Description status int 0 = success channel_id int OFDM channel identifier summary_type int FEC type: 2 = 10-min, 3 = 24-hour num_profiles int Total number of OFDM profiles reported fec_summary_data list List of FEC summaries for each profile \u2514\u2192 profile_id int Profile identifier (e.g., 0, 1, 255) \u2514\u2192 number_of_sets int Total number of time samples \u2514\u2192 codeword_entries list List of codeword stats per time unit \u2514\u2514\u2192 timestamp int (epoch) Capture time (seconds since epoch) \u2514\u2514\u2192 total_codewords int Total number of received codewords \u2514\u2514\u2192 corrected_codewords int Count of FEC-corrected codewords \u2514\u2514\u2192 uncorrectable_codewords int Count of codewords that could not be corrected"},{"location":"api/fast-api/single/ds/ofdm/fec-summary/#notes","title":"\ud83d\udcd1 Notes","text":"<ul> <li> <p>The number of <code>codeword_entries</code> is tied to <code>fec_summary_type</code>:</p> </li> <li> <p>Type 2 = 10-minute window (600 sets @ 1/sec)</p> </li> <li>Type 3 = 24-hour window (1440 sets @ 1/min)</li> <li>Profile ID <code>255</code> typically refers to NCP (Next Codeword Pointer).</li> <li>This summary data can be used to monitor FEC performance trends.</li> </ul> <p>\ud83d\udcc2 For implementation, refer to <code>src/pnm/analysis/ofdm_fec_summary.py</code>.</p>"},{"location":"api/fast-api/single/ds/ofdm/mer-margin/","title":"OFDM MER Margin","text":"<p>The purpose of this item is to provide an estimate of the MER margin available on the downstream data channel with respect to a modulation profile. The profile may be a profile that the modem has already been assigned or a candidate profile. This is similar to the MER Margin reported in the OPT-RSP Message [MULPIv3.1].</p> <p>The CM calculates the Required Average MER for the profile based on the bit loading for the profile and the Required MER per Modulation Order provided in the CmDsOfdmRequiredQamMer table. For profiles with mixed modulation orders, this value is computed as an arithmetic mean of the required MER values for each non-excluded subcarrier in the Modulated Spectrum. The CM then measures the RxMER per subcarrier and calculates the Average MER for the Active Subcarriers used in the Profile and stores the value as MeasuredAvgMer. The Operator may also compute the value for Required Average MER for the profile and set that value for the test.</p> <p>The CM also counts the number of MER per Subcarrier values that are below the threshold determined by the CmDsOfdmRequiredQamMer and the ThrshldOffset. The CM reports that value as NumSubcarriersBelowThrshld.</p> <p>This table will have a row for each ifIndex for the modem.</p>"},{"location":"api/fast-api/single/ds/ofdm/mer-margin/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ul> <li>Get Measurement</li> <li>Get Measurement Template</li> <li>Get Measurement Status</li> </ul>"},{"location":"api/fast-api/single/ds/ofdm/mer-margin/#get-measurement","title":"Get Measurement","text":""},{"location":"api/fast-api/single/ds/ofdm/mer-margin/#endpoint","title":"\ud83d\ude80 Endpoint","text":"<p>POST <code>/docs/pnm/ds/ofdm/merMargin/getMeasurement</code></p> <p>Initiates a MER margin measurement on a DOCSIS 3.1 downstream OFDM profile.</p>"},{"location":"api/fast-api/single/ds/ofdm/mer-margin/#request-body-json","title":"\ud83d\udcd2 Request Body (JSON)","text":"<p>```json {   \"cable_modem\": {   \"mac_address\": \"aa:bb:cc:dd:ee:ff\",    \"ip_address\": \"192.168.0.100\",   \"snmp\": {     \"snmpV2C\": {       \"community\": \"private\"     },     \"snmpV3\": {       \"username\": \"string\",       \"securityLevel\": \"noAuthNoPriv\",       \"authProtocol\": \"MD5\",       \"authPassword\": \"string\",       \"privProtocol\": \"DES\",       \"privPassword\": \"string\"     }   } }</p>"},{"location":"api/fast-api/single/ds/ofdm/modulation-profile/","title":"PNM Operations \u2013 Downstream OFDM Modulation Profile","text":"<p>This API gives operators visibility into how subcarriers are modulated within DOCSIS 3.1 OFDM downstream channels. Each OFDM channel can carry multiple modulation profiles (e.g., QAM-16 to QAM-4096), each tailored to the SNR conditions across frequency ranges. This endpoint retrieves the raw profile data and maps which modulation scheme is used across subcarrier groups.</p> <p>By pairing the /getMeasurement and /getAnalysis endpoints, operators can transform raw schema data into a meaningful per-subcarrier view, including estimated Shannon limits. These insights are crucial for validating profile assignments, identifying potential overmodulation or underutilization, and assessing channel capacity performance under real-world conditions.</p> <p>The analysis output is suitable for both automation and visualization, supporting export to Excel for offline diagnostics and engineering reports.</p>"},{"location":"api/fast-api/single/ds/ofdm/modulation-profile/#table-of-contents","title":"\ud83d\udcc2 Table of Contents","text":"<ul> <li>Get Measurement</li> <li>Get Analysis</li> <li>Analysis and Output Types</li> <li>Differences Between Measurement and Analysis</li> </ul>"},{"location":"api/fast-api/single/ds/ofdm/modulation-profile/#get-measurement","title":"Get Measurement","text":""},{"location":"api/fast-api/single/ds/ofdm/modulation-profile/#endpoint","title":"\ud83d\udcca Endpoint","text":"<p>POST <code>/docs/pnm/ds/ofdm/modulationProfile/getMeasurement</code></p> <p>This endpoint retrieves the modulation profile used in DOCSIS 3.1 OFDM downstream channels. It provides metadata and modulation schemes across available OFDM profiles, including per-subcarrier modulation orders. Note that this is a raw conversion; additional processing is needed to analyze full bit-loading and carrier types.</p>"},{"location":"api/fast-api/single/ds/ofdm/modulation-profile/#request-body-json","title":"\ud83d\udcc5 Request Body (JSON)","text":"<pre><code>{\n  \"cable_modem\": {\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\", \n  \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/modulation-profile/#response-body","title":"\ud83d\udce4 Response Body","text":"<pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": 0,\n  \"message\": null,\n  \"measurement\": {\n    \"data\": [\n      {\n        \"status\": \"SUCCESS\",\n        \"pnm_header\": {\n          \"file_type\": \"PNN\",\n          \"file_type_version\": 10,\n          \"major_version\": 1,\n          \"minor_version\": 0,\n          \"capture_time\": 1751820333\n        },\n        \"channel_id\": 197,\n        \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n        \"num_profiles\": 2,\n        \"zero_frequency\": 1217600000,\n        \"first_active_subcarrier_index\": 148,\n        \"subcarrier_spacing\": 50000,\n        \"profile_data_length_bytes\": 926,\n        \"profiles\": [\n          {\n            \"profile_id\": 4,\n            \"schemes\": [\n              {\n                \"schema_type\": 0,\n                \"modulation_order\": \"qam_4096\",\n                \"num_subcarriers\": 38\n              }\n            ]\n          },\n          {\n            \"profile_id\": 0,\n            \"schemes\": [\n              {\n                \"schema_type\": 0,\n                \"modulation_order\": \"qam_16\",\n                \"num_subcarriers\": 38\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/modulation-profile/#field-breakdown","title":"\ud83d\udcd8 Field Breakdown","text":"Field Type Description status string Status of the measurement (e.g., SUCCESS) pnm_header object Header metadata for the PNM file \u2192 file_type string File type identifier (e.g., PNN) \u2192 file_type_version int Version of the file type \u2192 major_version int Major version of the format \u2192 minor_version int Minor version of the format \u2192 capture_time int Timestamp when the data was captured channel_id int OFDM downstream channel ID mac_address string MAC address of the cable modem num_profiles int Number of profiles present zero_frequency int (Hz) Frequency of subcarrier index 0 first_active_subcarrier_index int First active subcarrier in the OFDM profile subcarrier_spacing int (Hz) Spacing between subcarriers in Hz (e.g., 50 kHz) profile_data_length_bytes int Length in bytes of the encoded profile data profiles array List of profile entries \u2192 profile_id int Profile identifier (e.g., 0, 4) \u2192 schemes array List of modulation schemes per profile \u2192\u2192 schema_type int Internal type ID (typically 0; may be reserved for future extensions) \u2192\u2192 modulation_order string Modulation type (e.g., qam_16, qam_4096) \u2192\u2192 num_subcarriers int Number of subcarriers using this modulation scheme"},{"location":"api/fast-api/single/ds/ofdm/modulation-profile/#get-analysis","title":"Get Analysis","text":""},{"location":"api/fast-api/single/ds/ofdm/modulation-profile/#endpoint_1","title":"\ud83d\udec1 Endpoint","text":"<p>POST <code>/docs/pnm/ds/ofdm/modulationProfile/getAnalysis</code></p> <p>Performs analysis of the downstream OFDM modulation profile for DOCSIS 3.1, calculating per-subcarrier modulation and Shannon capacity estimates. Supports JSON or XLSX output for easy visualization and processing.</p>"},{"location":"api/fast-api/single/ds/ofdm/modulation-profile/#request-body-json_1","title":"\ud83d\udcc5 Request Body (JSON)","text":"<pre><code>{\n  \"cable_modem\": {\n    \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n    \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": { \"community\": \"private\" },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  },\n  \"analysis\": { \"type\": 0 },\n  \"output\": { \"type\": 0 }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/modulation-profile/#json-response-output-type-0","title":"\ud83d\udce4 JSON Response (Output Type 0)","text":"<pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": 0,\n  \"data\": {\n    \"analysis\": [\n      {\n        \"pnm_header\": {\n          \"file_type\": \"PNN\",\n          \"file_type_version\": 10,\n          \"major_version\": 1,\n          \"minor_version\": 0,\n          \"capture_time\": 1751821207\n        },\n        \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n        \"channel_id\": 197,\n        \"frequency_unit\": \"Hz\",\n        \"shannon_limit_unit\": \"dB\",\n        \"profiles\": [\n          {\n            \"profile_id\": 4,\n            \"carrier_values\": {\n              \"frequency\": [1225000000],\n              \"modulation\": [\"qam_4096\"],\n              \"shannon_limit\": [36.12]\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/modulation-profile/#xlsx-output-output-type-2","title":"\ud83d\udcca XLSX Output (Output Type 2)","text":"<p>When <code>output.type</code> is set to 2, the response is an Excel file with columns:</p> <ul> <li>Frequency (Hz)</li> <li>Modulation Order (e.g., QAM-256)</li> <li>Shannon Limit (dB)</li> <li>Profile ID</li> </ul> <p>Useful for data visualization, graphing, and statistical modeling.</p>"},{"location":"api/fast-api/single/ds/ofdm/modulation-profile/#analysis-and-output-types","title":"Analysis and Output Types","text":""},{"location":"api/fast-api/single/ds/ofdm/modulation-profile/#analysistype","title":"<code>analysis.type</code>","text":"Value Type Description <code>0</code> BASIC Performs static profile decoding and Shannon performance estimation per subcarrier profile"},{"location":"api/fast-api/single/ds/ofdm/modulation-profile/#outputtype","title":"<code>output.type</code>","text":"Value Format Description <code>0</code> JSON Standard structured JSON suitable for API responses and dashboards <code>1</code> CSV Not supported <code>2</code> XLSX Excel-compatible output for offline review, reporting, or spreadsheet use"},{"location":"api/fast-api/single/ds/ofdm/modulation-profile/#differences-between-measurement-and-analysis","title":"Differences Between Measurement and Analysis","text":"Feature <code>/getMeasurement</code> <code>/getAnalysis</code> Primary Output Raw modulation profile and scheme data Per-subcarrier frequency, modulation, Shannon capacity Channel Coverage Captures all OFDM profiles Breaks down per-profile subcarrier-level detail Output Format Options JSON only JSON or XLSX Analysis Mode Not applicable Supports <code>BASIC</code> (additional types planned) Best Use Case Profile decoding and metadata inspection Visualization, modeling, advanced modulation diagnostics"},{"location":"api/fast-api/single/ds/ofdm/rxmer/","title":"PNM Operations \u2013 Downstream OFDM RxMER","text":"<p>This API provides deep visibility into the signal quality of DOCSIS 3.1+ downstream OFDM channels by retrieving and analyzing Receive Modulation Error Ratio (RxMER) at the subcarrier level.</p> <p>RxMER is one of the most powerful indicators of downstream plant health \u2014 capable of revealing narrowband interference, micro-reflections, and other impairments that traditional metrics cannot.</p> <p>The <code>/getMeasurement</code> endpoint captures real-time RxMER data from a cable modem, while <code>/getAnalysis</code> transforms this into frequency-aligned, statistically rich datasets for visualization and decision-making.</p>"},{"location":"api/fast-api/single/ds/ofdm/rxmer/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Get Measurement</li> <li>Get Measurement Statistics</li> <li>Get Analysis</li> <li>Analysis Type Reference</li> <li>Output Type Reference</li> <li>Returned File Types</li> <li>Example Output Gallery</li> <li>Differences Between Measurement and Analysis</li> </ul>"},{"location":"api/fast-api/single/ds/ofdm/rxmer/#get-measurement","title":"Get Measurement","text":""},{"location":"api/fast-api/single/ds/ofdm/rxmer/#endpoint","title":"Endpoint","text":"<p>POST <code>/docs/pnm/ds/ofdm/rxMer/getMeasurement</code></p> <p>Retrieves subcarrier-level RxMER (Receive Modulation Error Ratio) measurements from a DOCSIS 3.1+ cable modem. This data provides a high-resolution frequency-domain snapshot of downstream OFDM performance.</p>"},{"location":"api/fast-api/single/ds/ofdm/rxmer/#request-body","title":"Request Body","text":"Field Type Description <code>cable_modem.mac_address</code> string MAC address of the cable modem <code>cable_modem.ip_address</code> string IPv4 or IPv6 address of the cable modem <code>snmp.snmpV2C.community</code> string SNMPv2c community string <code>snmp.snmpV3.username</code> string SNMPv3 username <code>snmp.snmpV3.securityLevel</code> string SNMPv3 security level (<code>noAuthNoPriv</code>, <code>authNoPriv</code>, <code>authPriv</code>) <code>snmp.snmpV3.authProtocol</code> string SNMPv3 authentication protocol (<code>MD5</code>, <code>SHA</code>) <code>snmp.snmpV3.authPassword</code> string SNMPv3 authentication password <code>snmp.snmpV3.privProtocol</code> string SNMPv3 privacy protocol (<code>DES</code>, <code>AES</code>) <code>snmp.snmpV3.privPassword</code> string SNMPv3 privacy password <p>Example JSON Request</p> <pre><code>{\n  \"cable_modem\": {\n    \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n    \"ip_address\": \"192.168.0.100\",\n    \"snmp\": {\n      \"snmpV2C\": { \"community\": \"private\" },\n      \"snmpV3\": {\n        \"username\": \"string\",\n        \"securityLevel\": \"noAuthNoPriv\",\n        \"authProtocol\": \"MD5\",\n        \"authPassword\": \"string\",\n        \"privProtocol\": \"DES\",\n        \"privPassword\": \"string\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/rxmer/#get-measurement-response-example","title":"Get Measurement Response Example","text":"<pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": 0,\n  \"message\": null,\n  \"measurement\": {\n    \"data\": [\n      {\n        \"status\": \"SUCCESS\",\n        \"pnm_header\": {\n          \"file_type\": \"PNN\",\n          \"file_type_version\": 4,\n          \"major_version\": 1,\n          \"minor_version\": 0,\n          \"capture_time\": 1751831578\n        },\n        \"channel_id\": 197,\n        \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n        \"zero_frequency\": 1217600000,\n        \"first_active_subcarrier_index\": 148,\n        \"subcarrier_spacing\": 50000,\n        \"data_length\": 3800,\n        \"occupied_channel_bandwidth\": 190000000,\n        \"value_units\": \"dB\",\n        \"values\": [43.5, 44.5, 43.5, 43.5, 44],\n        \"signal_statistics\": {\n          \"mean\": 43.45,\n          \"median\": 43.5,\n          \"std\": 1.20,\n          \"variance\": 1.44,\n          \"power\": 1889.31,\n          \"peak_to_peak\": 7.75,\n          \"mean_abs_deviation\": 0.97,\n          \"skewness\": -0.085,\n          \"kurtosis\": 2.75,\n          \"crest_factor\": 1.08,\n          \"zero_crossing_rate\": 0,\n          \"zero_crossings\": 0\n        },\n        \"supported_modulation_counts\": {\n          \"qam_2\": 3800,\n          \"qam_4\": 3800,\n          \"qam_8\": 3800,\n          \"qam_16\": 3800,\n          \"qam_32\": 3800,\n          \"qam_64\": 3800,\n          \"qam_128\": 3800,\n          \"qam_256\": 3800,\n          \"qam_512\": 3800,\n          \"qam_1024\": 3800,\n          \"qam_2048\": 3800,\n          \"qam_4096\": 3800,\n          \"qam_8192\": 3800,\n          \"qam_16384\": 3273\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/rxmer/#get-measurement-statistics","title":"Get Measurement Statistics","text":""},{"location":"api/fast-api/single/ds/ofdm/rxmer/#endpoint_1","title":"Endpoint","text":"<p>POST <code>/docs/pnm/ds/ofdm/rxMer/getMeasurementStatistics</code></p> <p>Retrieves SNMP-based RxMER statistics and file information for downstream OFDM channels.</p>"},{"location":"api/fast-api/single/ds/ofdm/rxmer/#response-example","title":"Response Example","text":"<pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": 0,\n  \"message\": \"Measurement Statistics for RxMER\",\n  \"results\": {\n    \"DS_OFDM_RXMER_PER_SUBCAR\": [\n      {\n        \"index\": 1,\n        \"channel_id\": 160,\n        \"entry\": {\n          \"docsPnmCmDsOfdmRxMerFileEnable\": false,\n          \"docsPnmCmDsOfdmRxMerPercentile\": 2,\n          \"docsPnmCmDsOfdmRxMerMean\": 4474,\n          \"docsPnmCmDsOfdmRxMerStdDev\": 100,\n          \"docsPnmCmDsOfdmRxMerThrVal\": 171,\n          \"docsPnmCmDsOfdmRxMerThrHighestFreq\": 803700000,\n          \"docsPnmCmDsOfdmRxMerMeasStatus\": 4,\n          \"docsPnmCmDsOfdmRxMerFileName\": \"ds_ofdm_rxmer_per_subcar_aabbccddeeff_160_1752254123.bin\"\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/rxmer/#get-analysis","title":"Get Analysis","text":""},{"location":"api/fast-api/single/ds/ofdm/rxmer/#endpoint_2","title":"Endpoint","text":"<p>POST <code>/docs/pnm/ds/ofdm/rxmer/getAnalysis</code></p> <p>Performs a full downstream RxMER analysis using real-time SNMP collection or pre-captured PNM files. It executes regression fitting, Shannon limit evaluation, and modulation-order statistics per subcarrier.</p>"},{"location":"api/fast-api/single/ds/ofdm/rxmer/#request-body_1","title":"Request Body","text":"Field Type Description <code>cable_modem.mac_address</code> string MAC address of the modem <code>cable_modem.ip_address</code> string IPv4 or IPv6 address of the modem <code>pnm_parameters.tftp.ipv4</code> string TFTP server IPv4 address <code>pnm_parameters.tftp.ipv6</code> string TFTP server IPv6 address <code>pnm_parameters.snmp.snmpV2C.community</code> string SNMPv2C community string <code>pnm_parameters.snmp.snmpV3.*</code> object SNMPv3 credentials (optional) <code>analysis.type</code> integer Analysis mode selector <code>output.type</code> integer Output type selector (JSON or ARCHIVE) <p>Example JSON Request</p> <pre><code>{\n  \"cable_modem\": {\n    \"mac_address\": \"60:6C:63:E4:36:84\",\n    \"ip_address\": \"172.19.32.234\",\n    \"pnm_parameters\": {\n      \"tftp\": {\n        \"ipv4\": \"172.19.0.56\",\n        \"ipv6\": \"2001:428:3800:100:283f:2967:938a:bd68\"\n      },\n      \"snmp\": {\n        \"snmpV2C\": { \"community\": \"private\" },\n        \"snmpV3\": {\n          \"username\": \"string\",\n          \"securityLevel\": \"noAuthNoPriv\",\n          \"authProtocol\": \"MD5\",\n          \"authPassword\": \"string\",\n          \"privProtocol\": \"DES\",\n          \"privPassword\": \"string\"\n        }\n      }\n    }\n  },\n  \"analysis\": { \"type\": 0 },\n  \"output\": { \"type\": 1 }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/rxmer/#analysis-type-reference","title":"Analysis Type Reference","text":"Value Constant Description <code>0</code> <code>AnalysisType.BASIC</code> Performs basic frequency-domain analysis. Calculates regression line, Shannon limits, and per-subcarrier modulation order support."},{"location":"api/fast-api/single/ds/ofdm/rxmer/#output-type-reference","title":"Output Type Reference","text":"Value Constant Description <code>0</code> <code>FileType.JSON</code> Returns structured JSON analysis for UI or programmatic use. <code>1</code> <code>FileType.ARCHIVE</code> Returns a ZIP archive containing CSV, PNG, and summary files for offline analysis."},{"location":"api/fast-api/single/ds/ofdm/rxmer/#response-structure","title":"Response Structure","text":"<p>When <code>output.type = FileType.JSON</code>, returns a structured model; when <code>output.type = FileType.ARCHIVE</code>, returns a downloadable <code>.zip</code> file.</p> Field Type Description <code>device_details</code> object System descriptor and firmware metadata <code>pnm_header</code> object PNM file header fields (type, version, capture time) <code>channel_id</code> integer Downstream OFDM channel identifier <code>carrier_values.frequency</code> array (Hz) Subcarrier frequencies <code>carrier_values.magnitude</code> array (dB) RxMER values per subcarrier <code>carrier_values.carrier_status</code> array (int) 0=EXCLUSION, 1=CLIPPED, 2=NORMAL <code>regression.slope</code> array (float) Regression-fitted RxMER trend <code>modulation_statistics.snr_db_min</code> array (float) Shannon minimum SNR <code>modulation_statistics.supported_modulation_counts</code> object Modulation order counts by type"},{"location":"api/fast-api/single/ds/ofdm/rxmer/#returned-file-types","title":"Returned File Types","text":"<p>When <code>output.type = FileType.ARCHIVE</code>, the system bundles the following outputs into a single <code>.zip</code> file:</p> File Pattern Format Description <code>rxmer_&lt;MAC&gt;_&lt;CH&gt;.csv</code> CSV Raw per-subcarrier RxMER with Shannon limit and regression values <code>rxmer_&lt;MAC&gt;_&lt;CH&gt;_plot.png</code> PNG RxMER vs frequency plot with regression overlay <p>Example Archive Layout</p> <pre><code>rxmer_analysis_aabbccddeeff_20251011_197.zip\n\u251c\u2500\u2500 rxmer_aabbccddeeff_ch197.csv\n\u251c\u2500\u2500 rxmer_aabbccddeeff_ch197_plot.png\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/rxmer/#example-output-gallery","title":"Example Output Gallery","text":"<p>Below are representative visual outputs generated by <code>/getAnalysis</code> when <code>output.type = FileType.ARCHIVE</code>. These help visualize downstream OFDM health and modulation distribution.</p> File Description Preview <code>rxmer_&lt;MAC&gt;_&lt;CH&gt;_plot.png</code> RxMER per subcarrier with regression overlay (MER vs frequency). <code>modulation_count_&lt;MAC&gt;_&lt;CH&gt;.png</code> Histogram of modulation orders (bits per symbol vs count). <code>signal_aggregate_&lt;MAC&gt;.png</code> Combined RxMER response across all OFDM downstream channels. <p>To include previews in your documentation, store these PNGs in:</p>"},{"location":"api/fast-api/single/ds/ofdm/rxmer/#differences-between-measurement-and-analysis","title":"Differences Between Measurement and Analysis","text":"Operation Purpose Output <code>/getMeasurement</code> Collects raw RxMER data via SNMP Returns unprocessed subcarrier MER values <code>/getMeasurementStatistics</code> Retrieves SNMP-level metrics Returns modem-calculated mean, stddev, and threshold <code>/getAnalysis</code> Performs signal and modulation analysis Returns structured or archived analytical results"},{"location":"api/fast-api/single/ds/ofdm/stats/","title":"DOCSIS 3.1 Downstream OFDM Modulation Profile Stats","text":"<p>This API retrieves per-profile statistics from DOCSIS 3.1 downstream OFDM channels, giving operators visibility into how different modulation profiles are used across the spectrum. It includes codeword counts, frame-level metrics, and octet-based traffic counters for each active profile.</p> <p>Profiles may include any combination of profile IDs 0 through 4, with profile ID <code>255</code> always included as the NCP (Next Codeword Pointer).</p> <p>These metrics are essential for evaluating error correction trends, traffic segmentation, and overall modulation efficiency across a service group.</p>"},{"location":"api/fast-api/single/ds/ofdm/stats/#endpoint","title":"\ud83d\udce1 Endpoint","text":"<p>POST <code>/docs/if31/ds/ofdm/profile/stats</code></p> <p>Retrieves statistics per modulation profile for each DOCSIS 3.1 downstream OFDM channel, including total codewords, corrected/uncorrectable counts, frame metrics, and octet statistics. Profiles include both user-assigned IDs (e.g., 0, 4) and profile 255, which represents the NCP (Next Codeword Pointer).</p> <p>This data is useful for evaluating traffic utilization, identifying profile transitions, and monitoring FEC correction rates per modulation profile.</p>"},{"location":"api/fast-api/single/ds/ofdm/stats/#request-body-json","title":"\ud83d\udcc5 Request Body (JSON)","text":"<pre><code>{\n  \"cable_modem\": {\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\", \n  \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/stats/#request-fields","title":"\ud83d\udd11 Request Fields","text":"Field Data Type Description mac_address string MAC address of the cable modem ip_address string IP address of the cable modem snmp object SNMPv2c or SNMPv3 configuration credentials"},{"location":"api/fast-api/single/ds/ofdm/stats/#response-format-abbreviated-example","title":"\ud83d\udce4 Response Format (Abbreviated Example)","text":"<pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": 0,\n  \"message\": null,\n  \"data\": [\n    {\n      \"index\": 48,\n      \"channel_id\": 197,\n      \"profiles\": {\n        \"0\": { \"total_codewords\": 62095, \"corrected\": 0, \"uncorrectable\": 0 },\n        \"4\": { \"total_codewords\": 17282, \"corrected\": 3201, \"uncorrectable\": 0 },\n        \"255\": { \"total_codewords\": 53535309, \"corrected\": 0, \"uncorrectable\": 0 }\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/ofdm/stats/#per-profile-stats-each-profile-04-255","title":"\ud83d\udcca Per-Profile Stats (Each profile: 0\u20134, 255)","text":"Field Data Type Description docsIf31CmDsOfdmProfileStatsTotalCodewords int Total number of codewords received docsIf31CmDsOfdmProfileStatsCorrectedCodewords int Codewords corrected via FEC docsIf31CmDsOfdmProfileStatsUncorrectableCodewords int Codewords that could not be corrected docsIf31CmDsOfdmProfileStatsInOctets int Total bytes received for this profile docsIf31CmDsOfdmProfileStatsInUnicastOctets int Bytes from unicast sources docsIf31CmDsOfdmProfileStatsInMulticastOctets int Bytes from multicast sources docsIf31CmDsOfdmProfileStatsInFrames int Number of data frames received docsIf31CmDsOfdmProfileStatsInUnicastFrames int Count of unicast frames docsIf31CmDsOfdmProfileStatsInMulticastFrames int Count of multicast frames docsIf31CmDsOfdmProfileStatsInFrameCrcFailures int Number of CRC-failed frames docsIf31CmDsOfdmProfileStatsConfigChangeCt int Configuration change counter docsIf31CmDsOfdmProfileStatsCtrDiscontinuityTime int Counter discontinuity indicator"},{"location":"api/fast-api/single/ds/scqam/cw-error-rate/","title":"DOCSIS 3.0 Downstream SC\u2011QAM Channel Codeword Error Rate API","text":"<p>This endpoint computes per\u2011channel codeword error statistics for DOCSIS\u202f3.0 downstream SC\u2011QAM channels. It returns uncorrectable error counts, normalized error rates, and codeword throughput, helping you detect impairment or service\u2011level issues on legacy cable modems.</p>"},{"location":"api/fast-api/single/ds/scqam/cw-error-rate/#endpoint","title":"Endpoint","text":"<pre><code>POST /docs/if30/ds/scqam/chan/codewordErrorRate\n</code></pre> <p>Computes codeword error statistics over a sampling interval.</p>"},{"location":"api/fast-api/single/ds/scqam/cw-error-rate/#request-body","title":"Request Body","text":"<pre><code>{\n  \"cable_modem\": {\n    \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n    \"ip_address\": \"192.168.0.100\",\n    \"snmp\": {\n      \"snmpV2C\": { \"community\": \"private\" },\n      \"snmpV3\": {\n        \"username\": \"string\",\n        \"securityLevel\": \"noAuthNoPriv\",\n        \"authProtocol\": \"MD5\",\n        \"authPassword\": \"string\",\n        \"privProtocol\": \"DES\",\n        \"privPassword\": \"string\"\n      }\n    }\n  },\n  \"sample_time_elapsed\": 5.0\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/scqam/cw-error-rate/#request-fields","title":"Request Fields","text":"Field Type Description <code>cable_modem</code> object Cable modem connection parameters <code>mac_address</code> string MAC address of the cable modem <code>ip_address</code> string IP address of the cable modem <code>snmp</code> object SNMP credentials (<code>snmpV2C</code> or <code>snmpV3</code>) <code>sample_time_elapsed</code> number Sampling interval in seconds (default: 5)"},{"location":"api/fast-api/single/ds/scqam/cw-error-rate/#response-body","title":"Response Body","text":"<pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": 0,\n  \"message\": \"Successfully retrieved codeword error rate\",\n  \"results\": [\n    {\n      \"index\": 52,\n      \"channel_id\": 32,\n      \"codeword_totals\": {\n        \"total_codewords\": 1502550,\n        \"total_errors\": 0,\n        \"time_elapsed\": 5,\n        \"error_rate\": 0.0,\n        \"codewords_per_second\": 300510.0,\n        \"errors_per_second\": 0.0\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/scqam/cw-error-rate/#key-response-fields","title":"Key Response Fields","text":"Field Type Description <code>mac_address</code> string MAC address of the cable modem <code>status</code> integer 0 = success; non\u2011zero indicates an error <code>message</code> string Human\u2011readable status message <code>results</code> array List of per\u2011channel error rate entries <code>results[] .index</code> integer SNMP index of the downstream channel <code>results[] .channel_id</code> integer DOCSIS logical channel ID <code>results[] .codeword_totals</code> object Nested counters and rate metrics <code>codeword_totals.total_codewords</code> integer Total codewords counted over the interval <code>codeword_totals.total_errors</code> integer Number of uncorrectable codeword errors <code>codeword_totals.time_elapsed</code> number Sampling interval used (seconds) <code>codeword_totals.error_rate</code> number Fraction of uncorrectable errors (errors/codewords) <code>codeword_totals.codewords_per_second</code> number Normalized codewords per second (s\u207b\u00b9) <code>codeword_totals.errors_per_second</code> number Normalized errors per second (s\u207b\u00b9) <p>Rates use SI unit s\u207b\u00b9; multiply <code>error_rate</code> by 100 to get a percentage.</p>"},{"location":"api/fast-api/single/ds/scqam/cw-error-rate/#notes","title":"Notes","text":"<ul> <li>Ensure SNMP counters support 64\u2011bit to avoid overflow on high\u2011traffic channels.</li> <li><code>sample_time_elapsed</code> defaults to 5 seconds if omitted; adjust to match your SNMP polling interval.</li> <li>This API automatically introspects all downstream SC\u2011QAM channels\u2014no need to specify channel IDs.</li> </ul>"},{"location":"api/fast-api/single/ds/scqam/stats/","title":"DOCSIS 3.0 Downstream SC-QAM Channel Stats API","text":"<p>This API provides diagnostic access to DOCSIS 3.0 downstream SC-QAM channel statistics. It includes essential RF metrics like signal power, RxMER, and codeword error counters. These statistics help identify impairments such as micro-reflections, low MER, or excessive uncorrectables that can degrade customer experience.</p> <p>Use this endpoint to assess downstream signal health and modulation performance on legacy DOCSIS 3.0 modems.</p>"},{"location":"api/fast-api/single/ds/scqam/stats/#endpoint","title":"\ud83d\udce1 Endpoint","text":"<p>POST <code>/docs/if30/ds/scqam/chan/stats</code></p> <p>Retrieves DOCSIS 3.0 downstream SC-QAM channel configuration and signal quality statistics.</p>"},{"location":"api/fast-api/single/ds/scqam/stats/#request-body-json","title":"\ud83d\udcc5 Request Body (JSON)","text":"<pre><code>{\n  \"cable_modem\": {\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\", \n  \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/ds/scqam/stats/#request-fields","title":"\ud83d\udd11 Request Fields","text":"Field Data Type Description mac_address string MAC address of the cable modem ip_address string IP address of the cable modem snmp object SNMPv2c or SNMPv3 credentials"},{"location":"api/fast-api/single/ds/scqam/stats/#response-body-array-of-objects","title":"\ud83d\udce4 Response Body (Array of Objects)","text":"<p>Each object in the response represents one downstream SC-QAM channel.</p> <pre><code>[\n  {\n    \"index\": &lt;SNMP_INDEX&gt;,\n    \"channel_id\": &lt;CHANNEL_ID&gt;,\n    \"entry\": {\n      \"docsIfDownChannelId\": 1,\n      \"docsIfDownChannelFrequency\": 453000000,\n      \"docsIfDownChannelWidth\": 6000000,\n      \"docsIfDownChannelModulation\": 4,\n      \"docsIfDownChannelInterleave\": 5,\n      \"docsIfDownChannelPower\": -0.4,\n      \"docsIfSigQUnerroreds\": 3222055495,\n      \"docsIfSigQCorrecteds\": 48,\n      \"docsIfSigQUncorrectables\": 0,\n      \"docsIfSigQMicroreflections\": 3,\n      \"docsIfSigQExtUnerroreds\": 41876941255,\n      \"docsIfSigQExtCorrecteds\": 48,\n      \"docsIfSigQExtUncorrectables\": 0,\n      \"docsIf3SignalQualityExtRxMER\": 433\n    }\n  }\n]\n</code></pre>"},{"location":"api/fast-api/single/ds/scqam/stats/#key-response-fields","title":"\ud83d\udcca Key Response Fields","text":"Field Data Type Description index integer SNMP index of the downstream channel channel_id integer Logical channel ID entry.docsIfDownChannelFrequency integer Center frequency in Hz entry.docsIfDownChannelWidth integer Channel width in Hz entry.docsIfDownChannelModulation integer Modulation type (e.g., 4 = QAM256) entry.docsIfDownChannelPower float RF power in dBmV entry.docsIfSigQUnerroreds integer Uncorrected codewords entry.docsIfSigQCorrecteds integer Corrected codewords entry.docsIfSigQUncorrectables integer Uncorrectable codewords entry.docsIfSigQMicroreflections integer Detected micro-reflections (indicative of RF impairments) entry.docsIf3SignalQualityExtRxMER integer RxMER in tenths of dB (e.g., 433 = 43.3 dB) <p>\u2139\ufe0f Fields align with DOCSIS-IF3-MIB and provide key insight into downstream signal quality.</p>"},{"location":"api/fast-api/single/ds/scqam/stats/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>Values like <code>RxMER</code>, <code>Uncorrectables</code>, and <code>Microreflections</code> are critical for identifying RF issues.</li> <li><code>docsIfDownChannelModulation</code> should be interpreted via QAM type enum (e.g., 4 = QAM256).</li> <li>Extended counters (<code>ExtUnerroreds</code>, etc.) offer 64-bit insight where supported.</li> </ul> <p>\ud83d\udcc2 For OID mappings and definitions, see <code>DOCS-IF-MIB</code> and <code>DOCS-IF3-MIB</code></p>"},{"location":"api/fast-api/single/fdd/fdd-diplexer-band-edge-cap/","title":"DOCSIS 4.0 FDD Diplexer Band Edge Capability","text":"<p>This API exposes a cable modem\u2019s supported FDD diplexer band edge frequencies for downstream and upstream signal planning in DOCSIS 4.0 environments.</p>"},{"location":"api/fast-api/single/fdd/fdd-diplexer-band-edge-cap/#background","title":"\ud83d\udcda Background","text":"<p>Modern DOCSIS 4.0 FDD (Frequency Division Duplex) cable modems advertise their spectrum capabilities during registration using TLVs. These include the supported upstream and downstream band edge frequencies, critical for determining compatibility with extended spectrum deployments.</p> <p>These capabilities are reflected in the following SNMP tables:</p> <ul> <li><code>docsFddDiplexerUsUpperBandEdgeCapabilityTable</code> \u2192 TLV 5.84</li> <li><code>docsFddDiplexerDsLowerBandEdgeCapabilityTable</code> \u2192 TLV 5.82</li> <li><code>docsFddDiplexerDsUpperBandEdgeCapabilityTable</code> \u2192 TLV 5.83</li> </ul> <p>Each table contains a list of supported frequencies in MHz for the corresponding band edge direction.</p>"},{"location":"api/fast-api/single/fdd/fdd-diplexer-band-edge-cap/#endpoint","title":"\ud83d\udce1 Endpoint","text":"<p>POST <code>/docs/fdd/diplexer/bandEdgeCapability</code></p> <p>Retrieves all supported upstream and downstream diplexer band edge configurations from the cable modem.</p>"},{"location":"api/fast-api/single/fdd/fdd-diplexer-band-edge-cap/#request-body","title":"\ud83e\uddfe Request Body","text":"<pre><code>{\n  \"cable_modem\": {\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\", \n  \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/fdd/fdd-diplexer-band-edge-cap/#fields","title":"\ud83d\udd11 Fields","text":"Field Type Description <code>mac_address</code> string Target CM MAC address <code>ip_address</code> string Target CM IP address <code>snmp</code> object SNMPv2c or SNMPv3 credentials"},{"location":"api/fast-api/single/fdd/fdd-diplexer-band-edge-cap/#response","title":"\ud83d\udce4 Response","text":"<p>Returns a list of supported band edge triplets (Upstream Upper, Downstream Lower, Downstream Upper) grouped by capability index.</p>"},{"location":"api/fast-api/single/fdd/fdd-diplexer-band-edge-cap/#example-response","title":"\u2705 Example Response","text":"<pre><code>[\n  {\n    \"index\": 1,\n    \"entry\": {\n      \"docsFddDiplexerUsUpperBandEdgeCapability\": 85,\n      \"docsFddDiplexerDsLowerBandEdgeCapability\": 108,\n      \"docsFddDiplexerDsUpperBandEdgeCapability\": 1794\n    }\n  },\n  {\n    \"index\": 2,\n    \"entry\": {\n      \"docsFddDiplexerUsUpperBandEdgeCapability\": 204,\n      \"docsFddDiplexerDsLowerBandEdgeCapability\": 258,\n      \"docsFddDiplexerDsUpperBandEdgeCapability\": 1794\n    }\n  },\n  {\n    \"index\": 3,\n    \"entry\": {\n      \"docsFddDiplexerUsUpperBandEdgeCapability\": 396,\n      \"docsFddDiplexerDsLowerBandEdgeCapability\": 468,\n      \"docsFddDiplexerDsUpperBandEdgeCapability\": 1794\n    }\n  }\n]\n</code></pre>"},{"location":"api/fast-api/single/fdd/fdd-diplexer-band-edge-cap/#response-table","title":"\ud83d\udcca Response Table","text":"Field Name Type Description <code>index</code> integer Capability set identifier <code>entry.docsFddDiplexerUsUpperBandEdgeCapability</code> integer Supported upstream upper band edge frequency in MHz <code>entry.docsFddDiplexerDsLowerBandEdgeCapability</code> integer Supported downstream lower band edge frequency in MHz <code>entry.docsFddDiplexerDsUpperBandEdgeCapability</code> integer Supported downstream upper band edge frequency in MHz"},{"location":"api/fast-api/single/fdd/fdd-diplexer-band-edge-cap/#response-summary-table","title":"\ud83e\uddfe Response Summary Table","text":"Index Upstream Upper (MHz) Downstream Lower (MHz) Downstream Upper (MHz) 1 85 108 1794 2 204 258 1794 3 396 468 1794 <p>Each row corresponds to a diplexer configuration set supported by the cable modem.</p>"},{"location":"api/fast-api/single/fdd/fdd-diplexer-band-edge-cap/#notes","title":"\ud83d\udd0e Notes","text":"<ul> <li>Frequencies are in MHz and may include values not currently active, but supported by the CM.</li> <li>A <code>0</code> value indicates the device does not support extended spectrum for that band.</li> <li>This endpoint is useful when planning spectrum compatibility between modems and CMTS FDD profiles.</li> </ul>"},{"location":"api/fast-api/single/fdd/fdd-system-diplexer-configuration/","title":"DOCSIS 4.0 FDD Diplexer Configuration","text":"<p>This API retrieves the currently configured diplexer band edge frequencies on a DOCSIS 4.0 cable modem. These values are advertised during registration and reflect the modem\u2019s operating spectrum.</p>"},{"location":"api/fast-api/single/fdd/fdd-system-diplexer-configuration/#background","title":"\ud83d\udcda Background","text":"<p>The following SNMP fields correspond to TLVs sent by the CM in the Registration Request:</p> <ul> <li>TLV 5.79 \u2192 Downstream Lower Band Edge (<code>docsFddCmFddSystemCfgStateDiplexerDsLowerBandEdgeCfg</code>)</li> <li>TLV 5.80 \u2192 Downstream Upper Band Edge (<code>docsFddCmFddSystemCfgStateDiplexerDsUpperBandEdgeCfg</code>)</li> <li>TLV 5.81 \u2192 Upstream Upper Band Edge (<code>docsFddCmFddSystemCfgStateDiplexerUsUpperBandEdgeCfg</code>)</li> </ul> <p>These fields are read-only and reflect the CM's active configuration.</p>"},{"location":"api/fast-api/single/fdd/fdd-system-diplexer-configuration/#endpoint","title":"\ud83d\udce1 Endpoint","text":"<p>POST <code>/docs/fdd/system/diplexer/configurationr</code></p> <p>Retrieves the configured FDD diplexer band edges in MHz.</p>"},{"location":"api/fast-api/single/fdd/fdd-system-diplexer-configuration/#request-body","title":"\ud83e\uddfe Request Body","text":"<pre><code>{\n  \"cable_modem\": {\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\", \n  \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/fdd/fdd-system-diplexer-configuration/#fields","title":"\ud83d\udd11 Fields","text":"Field Type Description <code>mac_address</code> string Target CM MAC address <code>ip_address</code> string Target CM IP address <code>snmp</code> object SNMPv2c or SNMPv3 credentials"},{"location":"api/fast-api/single/fdd/fdd-system-diplexer-configuration/#response","title":"\ud83d\udce4 Response","text":"<p>Returns the configured upstream and downstream band edge frequencies for the cable modem.</p> <pre><code>{\n  \"index\": 0,\n  \"entry\": {\n    \"docsFddCmFddSystemCfgStateDiplexerDsLowerBandEdgeCfg\": 258,\n    \"docsFddCmFddSystemCfgStateDiplexerDsUpperBandEdgeCfg\": 1794,\n    \"docsFddCmFddSystemCfgStateDiplexerUsUpperBandEdgeCfg\": 204\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/fdd/fdd-system-diplexer-configuration/#response-fields","title":"\ud83d\udcca Response Fields","text":"Field Name Type Units Description <code>docsFddCmFddSystemCfgStateDiplexerDsLowerBandEdgeCfg</code> Unsigned32 MHz Downstream starting frequency (TLV 5.79) <code>docsFddCmFddSystemCfgStateDiplexerDsUpperBandEdgeCfg</code> Unsigned32 MHz Downstream ending frequency (TLV 5.80) <code>docsFddCmFddSystemCfgStateDiplexerUsUpperBandEdgeCfg</code> Unsigned32 MHz Upstream ending frequency (TLV 5.81)"},{"location":"api/fast-api/single/fdd/fdd-system-diplexer-configuration/#notes","title":"\ud83d\udd0e Notes","text":"<ul> <li>A value of <code>0</code> for any band edge indicates the CM is not configured for extended spectrum operation.</li> <li>These settings are crucial for verifying CM compatibility with FDD spectrum splits.</li> </ul>"},{"location":"api/fast-api/single/pnm/interface/stats/","title":"\ud83d\udcca Interface Statistics","text":"<p>This endpoint retrieves detailed SNMP interface statistics for a DOCSIS cable modem, including both standard and high-capacity counters as defined in <code>ifEntry</code> and <code>ifXEntry</code>.</p>"},{"location":"api/fast-api/single/pnm/interface/stats/#endpoint","title":"\ud83d\udce1 Endpoint","text":"<p>POST <code>/docs/pnm/interface/stats</code></p>"},{"location":"api/fast-api/single/pnm/interface/stats/#request-body","title":"\ud83d\udcc5 Request Body","text":"<pre><code>{\n  \"cable_modem\": {\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\", \n  \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre> Field Type Description <code>mac_address</code> string MAC address of the target cable modem (e.g., <code>aa:bb:cc:dd:ee:ff</code>) <code>ip_address</code> string IP address used to contact the cable modem (e.g., <code>192.168.0.100</code>) <code>snmp.snmpV2C.community</code> string SNMP community string for v2c (if using SNMPv2c) <code>snmp.snmpV3.username</code> string SNMPv3 username (if using SNMPv3) <code>snmp.snmpV3.securityLevel</code> string SNMPv3 security level (e.g., <code>noAuthNoPriv</code>, <code>authNoPriv</code>, <code>authPriv</code>) <code>snmp.snmpV3.authProtocol</code> string SNMPv3 authentication protocol (e.g., <code>MD5</code>, <code>SHA</code>) <code>snmp.snmpV3.authPassword</code> string SNMPv3 authentication password <code>snmp.snmpV3.privProtocol</code> string SNMPv3 privacy protocol (e.g., <code>DES</code>, <code>AES</code>) <code>snmp.snmpV3.privPassword</code> string SNMPv3 privacy password"},{"location":"api/fast-api/single/pnm/interface/stats/#response-body","title":"\ud83d\udce4 Response Body","text":"<pre><code>{\n  \"docsCableMaclayer\": [\n    {\n      \"ifEntry\": {\n        \"ifIndex\": 2,\n        \"ifDescr\": \"RF MAC Interface\",\n        \"ifType\": 127,\n        \"ifMtu\": 1522,\n        \"ifSpeed\": 0,\n        \"ifPhysAddress\": \"0x38ad2b12494c\",\n        \"ifAdminStatus\": 1,\n        \"ifOperStatus\": 1,\n        \"ifLastChange\": 0,\n        \"ifInOctets\": 171966389,\n        \"ifInUcastPkts\": 551951,\n        \"ifInNUcastPkts\": null,\n        \"ifInDiscards\": 0,\n        \"ifInErrors\": 0,\n        \"ifInUnknownProtos\": 0,\n        \"ifOutOctets\": 292133504,\n        \"ifOutUcastPkts\": 494466,\n        \"ifOutNUcastPkts\": null,\n        \"ifOutDiscards\": 0,\n        \"ifOutErrors\": 0,\n        \"ifOutQLen\": null,\n        \"ifSpecific\": null\n      },\n      \"ifXEntry\": {\n        \"ifName\": \"cni0\",\n        \"ifInMulticastPkts\": 37433,\n        \"ifInBroadcastPkts\": 0,\n        \"ifOutMulticastPkts\": 0,\n        \"ifOutBroadcastPkts\": 895,\n        \"ifHCInOctets\": 171966389,\n        \"ifHCInUcastPkts\": 551951,\n        \"ifHCInMulticastPkts\": 37433,\n        \"ifHCInBroadcastPkts\": 0,\n        \"ifHCOutOctets\": 292133504,\n        \"ifHCOutUcastPkts\": 494466,\n        \"ifHCOutMulticastPkts\": 0,\n        \"ifHCOutBroadcastPkts\": 895,\n        \"ifLinkUpDownTrapEnable\": 1,\n        \"ifHighSpeed\": 0,\n        \"ifPromiscuousMode\": true,\n        \"ifConnectorPresent\": true,\n        \"ifAlias\": \"\",\n        \"ifCounterDiscontinuityTime\": 0\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"api/fast-api/single/pnm/interface/stats/#field-descriptions","title":"\ud83d\udcc3 Field Descriptions","text":"Field Source Description <code>ifIndex</code> ifEntry Unique index for the interface <code>ifDescr</code> ifEntry Textual description of the interface <code>ifType</code> ifEntry Interface type (e.g. 6 = ethernetCsmacd, 127 = docsCableMaclayer) <code>ifMtu</code> ifEntry Maximum transmission unit size in bytes <code>ifSpeed</code> ifEntry Current bandwidth in bits per second <code>ifPhysAddress</code> ifEntry MAC address of the interface <code>ifAdminStatus</code> ifEntry Admin status: 1 = up, 2 = down, 3 = testing <code>ifOperStatus</code> ifEntry Operational status: 1 = up, 2 = down, 3 = testing <code>ifLastChange</code> ifEntry Time since the last operational status change <code>ifInOctets</code> / <code>ifOutOctets</code> ifEntry Total bytes received/sent (32-bit) <code>ifInUcastPkts</code> / <code>ifOutUcastPkts</code> ifEntry Unicast packets received/sent <code>ifInNUcastPkts</code> / <code>ifOutNUcastPkts</code> ifEntry Non-unicast (multicast/broadcast) packets <code>ifInDiscards</code> / <code>ifOutDiscards</code> ifEntry Discarded packets due to resource limits <code>ifInErrors</code> / <code>ifOutErrors</code> ifEntry Packets with errors during reception/transmission <code>ifInUnknownProtos</code> ifEntry Received packets with unknown protocol <code>ifOutQLen</code> ifEntry Length of output packet queue <code>ifSpecific</code> ifEntry Reserved for future use <code>ifName</code> ifXEntry Interface name (system-specific) <code>ifInMulticastPkts</code> / <code>ifOutMulticastPkts</code> ifXEntry Multicast packets received/sent <code>ifInBroadcastPkts</code> / <code>ifOutBroadcastPkts</code> ifXEntry Broadcast packets received/sent <code>ifHCInOctets</code> / <code>ifHCOutOctets</code> ifXEntry High-capacity (64-bit) byte counters <code>ifHCInUcastPkts</code> / <code>ifHCOutUcastPkts</code> ifXEntry High-capacity unicast packet counters <code>ifHCInMulticastPkts</code> / <code>ifHCOutMulticastPkts</code> ifXEntry High-capacity multicast packet counters <code>ifHCInBroadcastPkts</code> / <code>ifHCOutBroadcastPkts</code> ifXEntry High-capacity broadcast packet counters <code>ifLinkUpDownTrapEnable</code> ifXEntry SNMP trap setting for link state change <code>ifHighSpeed</code> ifXEntry Interface speed in Mbps (deprecated in favor of ifSpeed) <code>ifPromiscuousMode</code> ifXEntry Boolean flag indicating promiscuous mode enabled <code>ifConnectorPresent</code> ifXEntry True if physical connector is present <code>ifAlias</code> ifXEntry Administrator-assigned name for the interface <code>ifCounterDiscontinuityTime</code> ifXEntry Time of last counter reset/discontinuity"},{"location":"api/fast-api/single/pnm/interface/stats/#notes","title":"\ud83d\udcc6 Notes","text":"<ul> <li>Null fields may indicate unsupported metrics or interface types.</li> <li>The <code>docsCableMaclayer</code> array may contain multiple entries for multiple interfaces.</li> <li>Prefer <code>HC</code> (high-capacity) counters for accurate measurement on high-traffic links.</li> </ul>"},{"location":"api/fast-api/single/us/ofdma/pre-equalization/","title":"PNM Operations \u2013 Upstream OFDMA Pre-Equalization","text":"<p>This API allows retrieval and analysis of DOCSIS 3.1 upstream OFDMA pre-equalization data, which is crucial for identifying plant impairments like group delay, micro-reflections, and impedance mismatch. It captures and decodes the in-channel frequency response of a modem's upstream OFDMA transmission.</p> <p>Use this interface for proactive diagnostics and signal integrity assessments across active upstream channels.</p>"},{"location":"api/fast-api/single/us/ofdma/pre-equalization/#table-of-contents","title":"\ud83d\udcdb Table of Contents","text":"<ul> <li>Get Measurement</li> <li>Get Analysis</li> <li>Analysis and Output Types</li> </ul>"},{"location":"api/fast-api/single/us/ofdma/pre-equalization/#get-measurement","title":"Get Measurement","text":""},{"location":"api/fast-api/single/us/ofdma/pre-equalization/#endpoint","title":"\ud83d\udef0 Endpoint","text":"<p>POST <code>/docs/pnm/us/ofdma/preEqualization/getMeasurement</code></p> <p>Retrieves OFDMA upstream pre-equalization complex coefficients from a DOCSIS 3.1 cable modem for PNM diagnostics.</p>"},{"location":"api/fast-api/single/us/ofdma/pre-equalization/#request-body-json","title":"\ud83d\udc65 Request Body (JSON)","text":"<pre><code>{\n  \"cable_modem\": {\n    \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n    \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/us/ofdma/pre-equalization/#fields","title":"\ud83d\udd11 Fields","text":"Field Type Description mac_address string MAC address of the cable modem ip_address string IP address of the cable modem snmp object SNMPv2c or SNMPv3 credentials"},{"location":"api/fast-api/single/us/ofdma/pre-equalization/#response-body-object","title":"\ud83d\udcc4 Response Body (Object)","text":"<pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": 0,\n  \"message\": null,\n  \"measurement\": {\n    \"data\": [\n      {\n        \"status\": \"SUCCESS\",\n        \"pnm_header\": {\n          \"file_type\": \"PNN\",\n          \"file_type_version\": 6,\n          \"major_version\": 1,\n          \"minor_version\": 0,\n          \"capture_time\": 1751781817\n        },\n        \"upstream_channel_id\": 42,\n        \"cm_mac_address\": \"aa:bb:cc:dd:ee:ff\",\n        \"cmts_mac_address\": \"00:90:f0:01:00:00\",\n        \"subcarrier_zero_frequency\": 104800000,\n        \"first_active_subcarrier_index\": 74,\n        \"subcarrier_spacing\": 50000,\n        \"value_length\": 7584,\n        \"value_unit\": \"[Real, Imaginary]\",\n        \"values\": [\n          [1.0764, 0.6097],\n          [..., ...]\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/us/ofdma/pre-equalization/#key-response-fields","title":"\ud83d\udcca Key Response Fields","text":"Field Type Description mac_address string MAC address used in the request status integer 0 = success measurement.data array List of measurement entries per capture \u21b3 status string Capture status (e.g., \"SUCCESS\") \u21b3 upstream_channel_id integer Channel ID associated with this capture \u21b3 cm_mac_address string Cable modem MAC address \u21b3 cmts_mac_address string CMTS MAC address \u21b3 subcarrier_zero_frequency integer Base frequency (Hz) of subcarrier 0 \u21b3 first_active_subcarrier_index integer Index of first active subcarrier \u21b3 subcarrier_spacing integer Frequency spacing between subcarriers in Hz \u21b3 value_length integer Total number of subcarriers represented \u21b3 value_unit string Format of data (e.g., [Real, Imaginary]) \u21b3 values array List of complex coefficient pairs <p>\u2139\ufe0f Each value represents a decoded complex tap coefficient used for plant characterization.</p>"},{"location":"api/fast-api/single/us/ofdma/pre-equalization/#notes","title":"\ud83d\udccd Notes","text":"<ul> <li>This endpoint is part of the proactive diagnostics suite used to assess in-channel echo and group delay distortion.</li> <li>Each <code>values</code> array contains I/Q (real/imaginary) values per subcarrier.</li> <li>Timing information and versioning are provided via the <code>pnm_header</code> block.</li> </ul>"},{"location":"api/fast-api/single/us/ofdma/pre-equalization/#get-analysis","title":"Get Analysis","text":""},{"location":"api/fast-api/single/us/ofdma/pre-equalization/#endpoint_1","title":"\ud83d\udef0 Endpoint","text":"<p>POST <code>/docs/pnm/us/ofdma/preEqualization/getAnalysis</code></p> <p>Returns statistical analysis of decoded upstream OFDMA pre-equalization coefficients for DOCSIS 3.1 cable modems.</p>"},{"location":"api/fast-api/single/us/ofdma/pre-equalization/#request-body-json_1","title":"\ud83d\udc65 Request Body (JSON)","text":"<pre><code>{\n  \"cable_modem\": {\n    \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n    \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  },\n  \"analysis\": {\n    \"type\": 0\n  },\n  \"output\": {\n    \"type\": 0\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/us/ofdma/pre-equalization/#fields_1","title":"\ud83d\udd11 Fields","text":"Field Type Description mac_address string MAC address of the cable modem ip_address string IP address of the cable modem snmp object SNMPv2c or SNMPv3 credentials analysis.type int 0 = basic output.type int 0 = json  2 = xlsx"},{"location":"api/fast-api/single/us/ofdma/pre-equalization/#response-body-output-type-0","title":"\ud83d\udcc4 Response Body \u2013 Output Type <code>0</code>","text":"<pre><code>{\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"status\": 0,\n  \"data\": {\n    \"analysis\": [\n      {\n        \"pnm_header\": {\n          \"file_type\": \"PNN\",\n          \"file_type_version\": 6,\n          \"major_version\": 1,\n          \"minor_version\": 0,\n          \"capture_time\": 1751782748\n        },\n        \"mac_address\": null,\n        \"channel_id\": null,\n        \"frequency_unit\": \"Hz\",\n        \"magnitude_unit\": \"dB\",\n        \"group_delay_unit\": \"microsecond\",\n        \"complex_unit\": \"[Real, Imaginary]\",\n        \"carrier_values\": {\n          \"carrier_count\": 1896,\n          \"frequency\": [...],\n          \"magnitude\": [...],\n          \"group_delay\": [...],\n          \"complex\": [[-1.9545, -1.0011]]\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/us/ofdma/pre-equalization/#response-fields","title":"\ud83d\udcca Response Fields","text":"Field Type Description mac_address string MAC of the target modem status int 0 = success data.analysis list List of OFDMA analysis entries \u21b3 pnm_header object Metadata about the measurement file \u21b3 frequency_unit string Unit for x-axis of frequency array \u21b3 magnitude_unit string Unit for RxMER/magnitude in dB \u21b3 group_delay_unit string Unit for group delay values \u21b3 complex_unit string Format of the complex coefficients \u21b3 carrier_values object Actual subcarrier data and computed analysis \u21b3\u21b3 carrier_count int Total number of OFDMA subcarriers \u21b3\u21b3 frequency float[] Array of subcarrier center frequencies (Hz) \u21b3\u21b3 magnitude float[] Array of magnitude values in dB \u21b3\u21b3 group_delay float[] Group delay per subcarrier (\u03bcs) \u21b3\u21b3 complex float[][] Complex I/Q tap coefficients per subcarrier"},{"location":"api/fast-api/single/us/ofdma/pre-equalization/#notes_1","title":"\ud83d\udccd Notes","text":"<ul> <li>This endpoint performs full-spectrum statistical analysis on captured OFDMA coefficients.</li> <li>Output type 0 is structured and suitable for plotting or CSV export.</li> <li>Group delay is computed from the phase slope across adjacent subcarriers.</li> </ul>"},{"location":"api/fast-api/single/us/ofdma/pre-equalization/#analysis-and-output-types","title":"Analysis and Output Types","text":""},{"location":"api/fast-api/single/us/ofdma/pre-equalization/#analysistype","title":"<code>analysis.type</code>","text":"Value Description <code>0</code> Basic Magnitude and Group Delay Analysis"},{"location":"api/fast-api/single/us/ofdma/pre-equalization/#outputtype","title":"<code>output.type</code>","text":"Value Format Description <code>0</code> JSON Structured data for dashboards or raw API consumption <code>1</code> CSV Not Supported <code>2</code> XLSX (Planned) Taps overlay and echo/impulse view"},{"location":"api/fast-api/single/us/ofdma/stats/","title":"DOCSIS 3.1 Upstream OFDMA Channel Statistics","text":"<p>This API provides visibility into the configuration and runtime status of upstream OFDMA channels from DOCSIS 3.1 cable modems. It includes key metrics such as active subcarrier layout, transmit power, cyclic prefix configuration, and pre-equalization status. Additionally, it tracks upstream timeout counters (T3, T4) and ranging outcomes to help diagnose impairments and channel access issues.</p> <p>Use this endpoint to support PNM workflows, particularly when analyzing power levels, ranging stability, and OFDMA symbol behavior under varying network conditions.</p>"},{"location":"api/fast-api/single/us/ofdma/stats/#endpoint","title":"\ud83d\udef0\ufe0f Endpoint","text":"<p>POST <code>/docs/if31/us/ofdma/channel/stats</code></p> <p>Retrieves statistics and configuration parameters for upstream OFDMA channels from a DOCSIS 3.1 cable modem. This includes subcarrier layout, transmit power, and upstream timing-related error counters.</p>"},{"location":"api/fast-api/single/us/ofdma/stats/#request-body-json","title":"\ud83d\udce5 Request Body (JSON)","text":""},{"location":"api/fast-api/single/us/ofdma/stats/#request-fields","title":"\ud83d\udd11 Request Fields","text":"Field Type Description <code>mac_address</code> string MAC address of the cable modem <code>ip_address</code> string IP address of the cable modem <code>snmp</code> object SNMPv2c or SNMPv3 configuration <code>snmp.snmpV2C</code> object SNMPv2c options (<code>community</code>) <code>snmp.snmpV3</code> object SNMPv3 options (auth &amp; priv keys) <pre><code>{\n  \"cable_modem\": {\n    \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n    \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/us/ofdma/stats/#response-body-json","title":"\ud83d\udce4 Response Body (JSON)","text":"<pre><code>[\n  {\n    \"index\": &lt;SNMP_INDEX&gt;,\n    \"channel_id\": &lt;CHANNEL_ID&gt;,\n    \"entry\": {\n      \"docsIf31CmUsOfdmaChanChannelId\": 42,\n      \"docsIf31CmUsOfdmaChanConfigChangeCt\": 1,\n      \"docsIf31CmUsOfdmaChanSubcarrierZeroFreq\": 104800000,\n      \"docsIf31CmUsOfdmaChanFirstActiveSubcarrierNum\": 74,\n      \"docsIf31CmUsOfdmaChanLastActiveSubcarrierNum\": 1969,\n      \"docsIf31CmUsOfdmaChanNumActiveSubcarriers\": 1896,\n      \"docsIf31CmUsOfdmaChanSubcarrierSpacing\": 50,\n      \"docsIf31CmUsOfdmaChanCyclicPrefix\": 192,\n      \"docsIf31CmUsOfdmaChanRollOffPeriod\": 128,\n      \"docsIf31CmUsOfdmaChanNumSymbolsPerFrame\": 10,\n      \"docsIf31CmUsOfdmaChanTxPower\": 17.1,\n      \"docsIf31CmUsOfdmaChanPreEqEnabled\": true,\n      \"docsIf31CmStatusOfdmaUsT3Timeouts\": 0,\n      \"docsIf31CmStatusOfdmaUsT4Timeouts\": 0,\n      \"docsIf31CmStatusOfdmaUsRangingAborteds\": 0,\n      \"docsIf31CmStatusOfdmaUsT3Exceededs\": 0,\n      \"docsIf31CmStatusOfdmaUsIsMuted\": false,\n      \"docsIf31CmStatusOfdmaUsRangingStatus\": \"4\"\n    }\n  }\n]\n</code></pre>"},{"location":"api/fast-api/single/us/ofdma/stats/#response-field-highlights","title":"\ud83d\udcd8 Response Field Highlights","text":"Field Type Description <code>docsIf31CmUsOfdmaChanChannelId</code> int Upstream channel ID <code>docsIf31CmUsOfdmaChanConfigChangeCt</code> int Count of configuration changes since modem boot <code>docsIf31CmUsOfdmaChanSubcarrierZeroFreq</code> int Frequency of subcarrier index 0 (Hz) <code>docsIf31CmUsOfdmaChanFirstActiveSubcarrierNum</code> int First active subcarrier index <code>docsIf31CmUsOfdmaChanLastActiveSubcarrierNum</code> int Last active subcarrier index <code>docsIf31CmUsOfdmaChanNumActiveSubcarriers</code> int Total active subcarriers <code>docsIf31CmUsOfdmaChanSubcarrierSpacing</code> int Subcarrier spacing in Hz <code>docsIf31CmUsOfdmaChanCyclicPrefix</code> int Cyclic prefix duration <code>docsIf31CmUsOfdmaChanRollOffPeriod</code> int Roll-off period <code>docsIf31CmUsOfdmaChanNumSymbolsPerFrame</code> int Number of OFDMA symbols per frame <code>docsIf31CmUsOfdmaChanTxPower</code> float Transmit power in dBm <code>docsIf31CmUsOfdmaChanPreEqEnabled</code> bool Whether pre-equalization is enabled <code>docsIf31CmStatusOfdmaUsT3Timeouts</code> int T3 timeout count <code>docsIf31CmStatusOfdmaUsT4Timeouts</code> int T4 timeout count <code>docsIf31CmStatusOfdmaUsRangingAborteds</code> int Number of aborted ranging attempts <code>docsIf31CmStatusOfdmaUsT3Exceededs</code> int Number of times T3 retries exceeded <code>docsIf31CmStatusOfdmaUsIsMuted</code> bool Indicates if the upstream is muted <code>docsIf31CmStatusOfdmaUsRangingStatus</code> str Current ranging status (e.g., <code>4</code> = success)"},{"location":"api/fast-api/single/us/ofdma/stats/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>Use this endpoint to monitor upstream channel state, power, and timeouts.</li> <li>Useful for diagnosing access failures, ranging issues, or transmit mismatches.</li> <li>Each response object corresponds to a separate upstream OFDMA channel.</li> </ul>"},{"location":"api/fast-api/single/us/scqam/chan/pre-equalization/","title":"DOCSIS 3.0 Upstream ATDMA Pre-Equalization API","text":"<p>This endpoint provides access to DOCSIS 3.0 upstream pre-equalization tap data for SC-QAM (ATDMA) channels. The tap coefficients allow engineers to analyze cable plant conditions such as in-channel reflections, group delay, and pre-echo distortion. These insights are essential for proactive maintenance and plant alignment in legacy upstream environments.</p>"},{"location":"api/fast-api/single/us/scqam/chan/pre-equalization/#endpoint","title":"\ud83d\udce1 Endpoint","text":"<p>POST <code>/docs/if30/us/scqam/chan/preEqualization</code></p> <p>Retrieves pre-equalization coefficients and tap configuration for DOCSIS 3.0 upstream SC-QAM (ATDMA) channels.</p>"},{"location":"api/fast-api/single/us/scqam/chan/pre-equalization/#request-body-json","title":"\ud83d\udce5 Request Body (JSON)","text":"<pre><code>{\n  \"cable_modem\": {\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/us/scqam/chan/pre-equalization/#fields","title":"\ud83d\udd11 Fields","text":"Field Type Description mac_address string MAC address of the cable modem ip_address string IP address of the cable modem snmp object SNMPv2c or SNMPv3 credentials"},{"location":"api/fast-api/single/us/scqam/chan/pre-equalization/#response-body-per-channel","title":"\ud83d\udce4 Response Body (Per Channel)","text":"<pre><code>{\n  \"&lt;ChannelID&gt;\": {\n    \"main_tap_location\": 8,\n    \"forward_taps_per_symbol\": 1,\n    \"num_forward_taps\": 24,\n    \"num_reverse_taps\": 0,\n    \"forward_coefficients\": [\n      {\n        \"real\": 512,\n        \"imag\": -15427,\n        \"magnitude\": 15435.49,\n        \"magnitude_power_dB\": 83.77\n      },\n      {\n        \"real\": -15425,\n        \"imag\": 768,\n        \"magnitude\": 15444.11,\n        \"magnitude_power_dB\": 83.78\n      }\n      // ... additional taps\n    ],\n    \"reverse_coefficients\": []\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/us/scqam/chan/pre-equalization/#key-response-fields","title":"\ud83d\udcca Key Response Fields","text":"Field Type Description main_tap_location integer Location of the main tap (usually near center) forward_taps_per_symbol integer Forward taps per symbol num_forward_taps integer Number of forward equalizer taps num_reverse_taps integer Number of reverse equalizer taps forward_coefficients array List of complex coefficients in forward direction reverse_coefficients array List of complex coefficients in reverse direction \u21b3 real integer Real part of tap coefficient \u21b3 imag integer Imaginary part of tap coefficient \u21b3 magnitude float Magnitude of the complex tap \u21b3 magnitude_power_dB float Power of the tap in dB <p>\u2139\ufe0f Tap coefficient values are decoded from the upstream equalizer register and analyzed in-place.</p>"},{"location":"api/fast-api/single/us/scqam/chan/pre-equalization/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>Each top-level key in the response is a DOCSIS upstream channel ID.</li> <li>Forward taps are used to correct pre-echo distortion before transmission.</li> <li>Reverse taps are uncommon in ATDMA and may often be empty.</li> <li>Useful for diagnostics related to echo path delay, cable reflections, and plant distortion.</li> </ul> <p>\ud83d\udcc2 For interpretation methods, see: <code>DOCS-IF3-MIB::docsIf3CmStatusUsEqData</code> and internal tap decoder specifications.</p>"},{"location":"api/fast-api/single/us/scqam/chan/stats/","title":"DOCSIS 3.0 Upstream ATDMA Channel Stats API","text":"<p>This endpoint provides detailed telemetry on DOCSIS 3.0 upstream SC-QAM (ATDMA) channels from cable modems. It includes modulation, frequency, bandwidth, timing offsets, transmit power, timeout counters, and equalizer data\u2014critical for evaluating upstream performance and identifying plant impairments.</p>"},{"location":"api/fast-api/single/us/scqam/chan/stats/#endpoint","title":"\ud83d\udce1 Endpoint","text":"<p>POST <code>/docs/if30/us/scqam/chan/stats</code></p> <p>Retrieves statistics for upstream SC-QAM (ATDMA) channels on a DOCSIS 3.0 cable modem.</p>"},{"location":"api/fast-api/single/us/scqam/chan/stats/#request-body-json","title":"\ud83d\udce5 Request Body (JSON)","text":"<pre><code>{\n  \"cable_modem\": {\n  \"mac_address\": \"aa:bb:cc:dd:ee:ff\",\n  \"ip_address\": \"192.168.0.100\",\n  \"snmp\": {\n    \"snmpV2C\": {\n      \"community\": \"private\"\n    },\n    \"snmpV3\": {\n      \"username\": \"string\",\n      \"securityLevel\": \"noAuthNoPriv\",\n      \"authProtocol\": \"MD5\",\n      \"authPassword\": \"string\",\n      \"privProtocol\": \"DES\",\n      \"privPassword\": \"string\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/fast-api/single/us/scqam/chan/stats/#fields","title":"\ud83d\udd11 Fields","text":"Field Type Description mac_address string MAC address of the cable modem ip_address string IP address of the cable modem snmp object SNMPv2c or SNMPv3 credentials"},{"location":"api/fast-api/single/us/scqam/chan/stats/#response-body-array-of-objects","title":"\ud83d\udce4 Response Body (Array of Objects)","text":"<p>Each object in the response represents one upstream ATDMA channel.</p> <pre><code>[\n  {\n    \"index\": &lt;SNMP_INDEX&gt;,\n    \"channel_id\": &lt;CHANNEL_ID&gt;,\n    \"entry\": {\n      \"docsIfUpChannelId\": 2,\n      \"docsIfUpChannelFrequency\": 21000000,\n      \"docsIfUpChannelWidth\": 6400000,\n      \"docsIfUpChannelModulationProfile\": 0,\n      \"docsIfUpChannelSlotSize\": 2,\n      \"docsIfUpChannelTxTimingOffset\": 8591,\n      \"docsIfUpChannelRangingBackoffStart\": 3,\n      \"docsIfUpChannelRangingBackoffEnd\": 8,\n      \"docsIfUpChannelTxBackoffStart\": 2,\n      \"docsIfUpChannelTxBackoffEnd\": 6,\n      \"docsIfUpChannelType\": 2,\n      \"docsIfUpChannelCloneFrom\": 0,\n      \"docsIfUpChannelUpdate\": false,\n      \"docsIfUpChannelStatus\": 1,\n      \"docsIfUpChannelPreEqEnable\": true,\n      \"docsIf3CmStatusUsTxPower\": 45.5,\n      \"docsIf3CmStatusUsT3Timeouts\": 1,\n      \"docsIf3CmStatusUsT4Timeouts\": 0,\n      \"docsIf3CmStatusUsRangingAborteds\": 0,\n      \"docsIf3CmStatusUsModulationType\": 2,\n      \"docsIf3CmStatusUsEqData\": \"0x...\",\n      \"docsIf3CmStatusUsT3Exceededs\": 0,\n      \"docsIf3CmStatusUsIsMuted\": false,\n      \"docsIf3CmStatusUsRangingStatus\": 4\n    }\n  },\n  { }\n]\n</code></pre>"},{"location":"api/fast-api/single/us/scqam/chan/stats/#key-response-fields","title":"\ud83d\udcca Key Response Fields","text":"Field Type Description index integer SNMP index of the upstream channel channel_id integer Logical channel ID entry.docsIfUpChannelFrequency integer Center frequency in Hz entry.docsIfUpChannelWidth integer Channel bandwidth in Hz entry.docsIfUpChannelTxTimingOffset integer Timing offset entry.docsIfUpChannelType integer Channel type (e.g., ATDMA = 2) entry.docsIf3CmStatusUsTxPower float Transmit power in dBmV entry.docsIf3CmStatusUsT3Timeouts integer Number of T3 timeouts entry.docsIf3CmStatusUsT4Timeouts integer Number of T4 timeouts entry.docsIf3CmStatusUsRangingAborteds integer Count of aborted ranging attempts entry.docsIf3CmStatusUsEqData string Hex-encoded upstream equalizer tap data entry.docsIf3CmStatusUsIsMuted boolean Whether the channel is currently muted entry.docsIf3CmStatusUsRangingStatus integer Current ranging status code <p>\u2139\ufe0f Other fields follow DOCSIS-IF3-MIB conventions.</p>"},{"location":"api/fast-api/single/us/scqam/chan/stats/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>The response is an array and may contain multiple upstream ATDMA channels.</li> <li>The <code>docsIf3CmStatusUsEqData</code> field is a binary string and may be parsed for tap coefficient analysis.</li> <li>This endpoint is used for troubleshooting upstream channel performance on DOCSIS 3.0 modems.</li> </ul> <p>\ud83d\udcc2 For OID definitions and structure, refer to: <code>DOCS-IF-MIB</code> and <code>DOCS-IF3-MIB</code></p>"},{"location":"api/fast-api/status/fast-api-status-codes/","title":"<code>ServiceStatusCode</code> Enum Documentation","text":"<p>This enum defines status codes used by PNM service classes to indicate the result of operations such as SNMP reachability, RxMER capture, and TFTP interactions.</p>"},{"location":"api/fast-api/status/fast-api-status-codes/#status-codes","title":"Status Codes","text":"Name Value Description <code>SUCCESS</code> <code>0</code> Operation completed successfully."},{"location":"api/fast-api/status/fast-api-status-codes/#general-error-codes-but-limited-to-the-following","title":"\u274c General Error Codes, but limited to the following","text":"Name Value Description <code>UNREACHABLE_PING</code> <code>1</code> The cable modem is not reachable via ICMP ping. <code>UNREACHABLE_SNMP</code> <code>2</code> The cable modem is not reachable via SNMP. <code>NO_PLC_FOUND</code> <code>3</code> No PLC frequencies were found on the modem. <code>INVALID_PLC</code> <code>4</code> A requested PLC frequency was invalid. <code>TFTP_INET_MISMATCH</code> <code>5</code> TFTP server has a mismatched IP version (IPv4 vs IPv6). <code>FILE_SET_FAIL</code> <code>6</code> Failed to configure RxMER filename on the cable modem. <code>TEST_ERROR</code> <code>7</code> A generic error occurred during the RxMER test. <code>MEASUREMENT_TIMEOUT</code> <code>8</code> The measurement process timed out waiting for readiness. <code>TFTP_SERVER_PATH_SET_FAIL</code> <code>9</code> Unable to set the TFTP server address or path on the modem. <code>NOT_REACY_AFTER_FILE_CAPTURE</code> <code>10</code> Modem did not enter READY state after RxMER capture."},{"location":"examples/","title":"PyPNM Examples","text":"<p>This directory contains runnable examples showing how to use the PyPNM project in four main contexts:</p> <pre><code>examples/\n\u251c\u2500\u2500 fast-api          # Scripts demonstrating FastAPI endpoints\n\u251c\u2500\u2500 pnm               # Standalone PNM\u2010file parsing and reporting\n\u251c\u2500\u2500 service           # Wrapped service\u2010layer calls using CableModem API\n\u2514\u2500\u2500 snmp              # Low\u2010level SNMP get / walk and bulk\u2010set examples\n</code></pre>"},{"location":"examples/#1-fastapi","title":"1. FastAPI","text":"<p>PyPNM FastAPI router:</p>"},{"location":"examples/#2-pnm-file-parsing-examples-examplespnm","title":"2. PNM File Parsing Examples (<code>examples/pnm</code>)","text":"<p>Standalone Python scripts that load PNM binary files (from <code>examples/data/pnm</code>) and print parsed output:</p> Script Description <code>cm-pnm-ds-histogram.py</code> Parses downstream histogram profiles <code>cm-pnm-ds-ofdm-const-display.py</code> Parses OFDM constellation data <code>cm-pnm-ds-ofdm-fec-summary.py</code> Parses FEC summary <code>cm-pnm-ds-ofdm-mod-profile.py</code> Parses modulation profile <code>cm-pnm-ds-ofdm-rxmer.py</code> Parses RxMER (modulation error ratio) <code>cm-pnm-ds-symbol-capture.py</code> Parses symbol capture buffers <code>cm-pnm-latency-report.py</code> Parses latency reports <code>cm-pnm-spectrum-analyzer.py</code> Parses spectrum analysis data <code>cm-pnm-us-ofdma-pre-eq.py</code> Parses upstream OFDMA pre\u2010equalizer state <p>Usage:</p> <pre><code>python cm-pnm-ds-ofdm-fec-summary.py examples/data/pnm/sample.pnm\n</code></pre>"},{"location":"examples/#3-service-layer-examples-examplesservice","title":"3. Service Layer Examples (<code>examples/service</code>)","text":"<p>Shows how to wrap low\u2010level PNM or SNMP calls into higher\u2010level service functions:</p> <ul> <li>Run a service:</li> </ul> <p><code>bash   python cm-service-set-ds-histogram.py --mac 00:11:22:33:44:55 --inet 192.168.1.100</code></p> <p>Each <code>cm-service-*.py</code> script invokes the corresponding <code>Service</code> class method and prints a Pydantic\u2010validated response.</p>"},{"location":"examples/#4-snmp-raw-examples-examplessnmp","title":"4. SNMP Raw Examples (<code>examples/snmp</code>)","text":"<p>Demonstrates SNMP: GET, SET, WALK</p> <ul> <li>GET:</li> </ul> <p>```bash   MAC=\"00:11:22:33:44:55\"   INET=\"192.168.1.100\"   COMMUNITY=\"private\"   CLI=\"--mac ${MAC} --inet ${INET} --community-write ${COMMUNITY}\"</p> <p>./cm-get-sysDescr.py ${CLI}   ```</p> <ul> <li>SET:</li> </ul> <p>```bash   MAC=\"00:11:22:33:44:55\"   INET=\"192.168.1.100\"   COMMUNITY=\"private\"   CLI=\"--mac ${MAC} --inet ${INET} --community-write ${COMMUNITY}\"</p> <p>./cm-get-sysDescr.py ${CLI}   ```</p> <ul> <li>WALK:</li> </ul> <p>```bash   MAC=\"00:11:22:33:44:55\"   INET=\"192.168.1.100\"   COMMUNITY=\"private\"   CLI=\"--mac ${MAC} --inet ${INET} --community-write ${COMMUNITY}\"</p> <p>./cm-get-sysDescr.py ${CLI}   ```</p> <p>Happy Testing! These examples should help you get started quickly with parsing PNM files, invoking SNMP operations, and standing up the full FastAPI service. Let us know if you need more!</p>"},{"location":"examples/endpoint-fetcher/","title":"Automatic PNM Endpoint Fetcher","text":"<p>Use this guide to auto-discover and invoke all SNMP-based PNM endpoints under <code>/docs/pnm/...</code> in your FastAPI service with a simple helper script.</p>"},{"location":"examples/endpoint-fetcher/#usage","title":"\ud83d\ude80 Usage","text":"<ol> <li>Set environment variables (or substitute values directly):</li> </ol> <p><code>bash    export URL=\"http://localhost:8000/docs/pnm/us_ofdma_pre_eq\"    export MAC=\"aabb.ccdd.eeff\"    export INET=\"192.168.100.1\"    export COMMUNITY=\"private\"    export OUT=\"responses.json\"</code></p> <ol> <li>Run the fetcher script from your project root:</li> </ol> <p><code>bash    ./src/pypnm/examples/fast-api/fast-api-fetcher.sh \\      --url \"$URL\" \\      --mac \"$MAC\" \\      --inet \"$INET\" \\      --v2c \"$COMMUNITY\" \\      --output \"$OUT\"</code></p> <ol> <li>Review the output JSON file (<code>responses.json</code>) to see the combined responses.</li> </ol> <p>Tip: View all <code>/docs/pnm/...</code> endpoints in your Swagger UI at http://localhost:8000/docs or see the FastAPI overview: API Reference.</p>"},{"location":"examples/endpoint-fetcher/#script-location","title":"\ud83d\udcc2 Script Location","text":"<p>The helper script lives here:</p> <pre><code>src/pypnm/examples/fast-api/fast-api-fetcher.sh\n</code></pre> <p>Open it at: fast-api-fetcher.sh</p>"},{"location":"tools/pypnm-clean/","title":"PyPNM Cleanup Script","text":"<p>The PyPNM Cleanup Script is a flexible shell utility located in the <code>tools/</code> directory. It provides a structured way to clean up logs, Python cache files, build artifacts, generated output, and internal <code>.data</code> folders related to PNM processing.</p> <p>This tool is essential for maintaining a clean development environment and resetting analysis directories.</p>"},{"location":"tools/pypnm-clean/#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Clean specific or all categories of build and runtime artifacts</li> <li>Supports scoped operations (e.g., logs only)</li> <li>Works from any root directory (defaults to current dir)</li> <li>Safe deletion with checks</li> </ul>"},{"location":"tools/pypnm-clean/#directory-structure-cleaned","title":"\ud83d\udcc1 Directory Structure Cleaned","text":"Option Cleans <code>--logs</code> <code>logs/</code> <code>--python</code> <code>__pycache__/</code>, <code>*.pyc</code>, <code>.pytest_cache</code> <code>--build</code> <code>build/</code>, <code>dist/</code>, <code>*.egg-info</code> <code>--pnm</code> <code>.data/pnm/</code>, <code>.data/db/</code> <code>--excel</code> <code>.data/xlsx/</code>, <code>.data/csv/</code> <code>--output</code> <code>output/</code> <code>--all</code> All of the above"},{"location":"tools/pypnm-clean/#usage","title":"\ud83e\uddea Usage","text":"<pre><code>./tools/clean.sh [OPTIONS] [ROOT_DIR]\n</code></pre> <ul> <li> <p><code>OPTIONS</code>: One or more of:</p> </li> <li> <p><code>--all</code></p> </li> <li><code>--logs</code></li> <li><code>--python</code></li> <li><code>--build</code></li> <li><code>--pnm</code></li> <li><code>--excel</code></li> <li><code>--output</code></li> <li><code>ROOT_DIR</code>: Optional path to apply the cleanup (defaults to current directory)</li> </ul>"},{"location":"tools/pypnm-clean/#examples","title":"\u2705 Examples","text":"<p>Clean everything:</p> <pre><code>./tools/clean.sh --all\n</code></pre> <p>Clean only logs and build artifacts:</p> <pre><code>./tools/clean.sh --logs --build\n</code></pre> <p>Clean PNM and Excel data from a different root:</p> <pre><code>./tools/clean.sh --pnm --excel ~/Projects/PyPNM\n</code></pre>"},{"location":"tools/pypnm-mib-compiler/","title":"PyPNM MIB Compiler","text":"<p>The PyPNM MIB Compiler is a command-line utility script located in the <code>tools/</code> directory that automates the generation of a Python dictionary mapping SNMP OID names to their numeric representations. This mapping is essential for structured SNMP integration within the PyPNM framework.</p>"},{"location":"tools/pypnm-mib-compiler/#purpose","title":"\ud83d\udcc4 Purpose","text":"<p>To convert all MIB definitions found in the <code>mibs/</code> directory into a usable Python dictionary (<code>COMPILED_OIDS</code>) and save them into:</p> <pre><code>src/pypnm/snmp/compiled_oids.py\n</code></pre> <p>This file is automatically overwritten and includes a UTC timestamp indicating when the OID data was last compiled.</p> <p>\u26a1 Why this matters: Pre-compiling OIDs dramatically reduces SNMP lookup overhead and avoids dynamic MIB parsing at runtime with PySNMP. This speeds up application startup and ensures stability in production environments.</p>"},{"location":"tools/pypnm-mib-compiler/#how-it-works","title":"\ud83d\udd27 How It Works","text":"<p>The script:</p> <ol> <li>Executes <code>snmptranslate -Tz</code> against MIBs in the local <code>mibs/</code> directory.</li> <li>Saves the raw output to a temporary file.</li> <li>Parses name-to-OID mappings.</li> <li>Writes the result as <code>COMPILED_OIDS</code> to <code>compiled_oids.py</code>.</li> </ol>"},{"location":"tools/pypnm-mib-compiler/#directory-structure","title":"\ud83d\uddc2 Directory Structure","text":"<pre><code>PyPNM/\n\u251c\u2500\u2500 mibs/                          # Input MIB files (.txt/.my)\n\u251c\u2500\u2500 src/pypnm/snmp/               # Target module location\n\u2502   \u2514\u2500\u2500 compiled_oids.py          # Auto-generated dictionary\n\u2514\u2500\u2500 tools/\n    \u2514\u2500\u2500 update_snmp_oid_dict.py  # This script\n</code></pre>"},{"location":"tools/pypnm-mib-compiler/#usage","title":"\u25b6\ufe0f Usage","text":"<p>From the PyPNM root directory:</p> <pre><code>python3 tools/update_snmp_oid_dict.py\n</code></pre> <p>This will output something like:</p> <pre><code>\ud83d\udd04 Generating compiled OIDs from MIBs...\n\u2705 Compiled 782 OIDs to 'src/pypnm/snmp/compiled_oids.py'\n</code></pre>"},{"location":"tools/pypnm-mib-compiler/#prerequisites","title":"\ud83e\uddf1 Prerequisites","text":""},{"location":"tools/pypnm-mib-compiler/#1-python","title":"1. Python","text":"<ul> <li>Python 3.6 or newer</li> </ul>"},{"location":"tools/pypnm-mib-compiler/#2-net-snmp","title":"2. Net-SNMP","text":"<p>The script depends on the <code>snmptranslate</code> utility provided by the Net-SNMP package. Install it using:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install -y snmp snmp-mibs-downloader\n</code></pre> <p>Or on Red Hat\u2013based systems:</p> <pre><code>sudo dnf install net-snmp-utils\n</code></pre> <p>Make sure <code>snmptranslate</code> is in your <code>PATH</code>:</p> <pre><code>which snmptranslate\n</code></pre>"},{"location":"tools/pypnm-mib-compiler/#3-curl-for-mib-retrieval","title":"3. curl (for MIB retrieval)","text":"<p>The MIB fetch process uses <code>curl</code> and <code>grep</code>. Install if needed:</p> <pre><code>sudo apt install -y curl\n</code></pre>"},{"location":"tools/pypnm-mib-compiler/#4-download-latest-cablelabs-mibs","title":"4. Download Latest CableLabs MIBs","text":"<p>To populate the <code>mibs/</code> directory with the latest DOCSIS MIBs from CableLabs without traversing subdirectories like archive/:</p> <pre><code>curl -s https://mibs.cablelabs.com/MIBs/DOCSIS/ | \\\n  grep -oP '(?&lt;=href=\")[^\"/]+\\.(my|txt)(?=\")' | \\\n  while read file; do\n    wget -nc \"https://mibs.cablelabs.com/MIBs/DOCSIS/$file\" -P mibs/\n  done\n</code></pre> <p>This limits downloads to only top-level <code>.my</code> and <code>.txt</code> MIB files, avoiding archive folders.</p>"},{"location":"tools/pypnm-mib-compiler/#output-format","title":"\ud83d\udcdd Output Format","text":"<p>The resulting file will contain:</p> <pre><code># Auto-generated OID dictionary from snmptranslate -Tz\n# Do not modify manually. Generated on: 2025-07-06T20:15:45.123456\n\nCOMPILED_OIDS = {\n    \"docsIf3CmtsCmUsStatusRxPower\": \"1.3.6.1.4.1.1166.1.19.2.3.1.6\",\n    ...\n}\n</code></pre>"}]}